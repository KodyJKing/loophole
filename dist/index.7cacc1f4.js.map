{"mappings":"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UAAWD,mEAAO,KAAM;MACrD,KAAKD;;;;WAGT,qBAAaC;;UACLhC,gCAAW,KAAKiC,UAAWD,qEAAO,KAAM;UACvChC,UAAU,UACJ,KAAKiC,UAAWD,SAEvB,KAAKpD,SAAUoD,KAAMhC;MACzB,KAAK+B;;;;WAGT,qBAAaC;eACCpJ,KAAK,KAAKqJ;YACZC,IAAIzC,SAAU7G;YACbsJ,KAAKF;QACV,KAAKD,kBAAkB,KAAKE,UAAWC;eAChC,KAAKD,UAAWC;;;;;;;;;AC3BntRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACZA9O,OAAO+O,UAAU5M,KAAKC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOb,sBAAuB4M;MAC9BC,QAAQD;MACNjF,QAA0BkF,MAA1BlF,OAAOC,SAAmBiF,MAAnBjF,QAAQkF,SAAWD,MAAXC;MACjBlG,0BAAcmG,OAAQpF,OAAOC;6CACdkF;;;UAATE;UACDA,MAAM3O;YACH4O,4BAAiCD,MAAME;QAC3CtG,MAAMkG,OAAQG,WAAYD,MAAM3O,KAAK0E,IAAK,UAAAnC;iBAAMA,KAAK;;;oDAEpCoM,MAAMG;;;gBAAbC;gBACFC,aAAeC,YAAaF,IAAInN;gBAC/BmN,IAAIG;0DACiBH,IAAIG;;;sBAAhBC;sBACDH,OAAOI,eAAgBD,SAASN,OACjCG,OAAQG,SAASN,QAASM,SAASpD;;;;;;;;gBAC3C2B,KAAMqB,IAAIrB,IAAIqB,IAAIzF,QAAQ,wBAAaA;gBACvC+F,KAAMN,IAAIM,IAAIN,IAAIxF,SAAS,wBAAaD;YAC5Cf,MAAM+G,UAAWN,QAAQtB,GAAG2B;;;;;;;;;;;;;;EAIxC5M,QAAQ6B,IAAKiE;SACNA;;IAGL0G;IACAM;gCAMkBA;MAAdC;EACNP,YAAaO,WAAWX,QAASW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC9BxBC;;;;;;;;;;gEAGG;8DACF;0EAGY;sEACJ;sEACA;0DAEZ;;;;;WAEN;UACQC;MAUJ,KAAKC,0CAA+BD;;;;WAGxC,eAAOnH,OAAcqH;WACX,KAAKC,SAAUtH;UAEfmF,IAAS,KAATA,GAAG2B,IAAM,KAANA;MACT,KAAKS,YAAY9H,KAAK2B,KAAMiG;UACxBG,KAAKxH,MAAMyH,QAAStC,IAAI,KAAKoC,WAAWT,KAAM,KAAK;MACvD,KAAKY,KAAM1H,OAAO,KAAKuH,WAAWC;;;;WAGtC,eAAO9G;UACE,KAAKiH,cAAc1P;YAChB2P,kBAAkBnI,KAAKoI,IAAK,KAAKD,kBAAkBlH,UAAU;eACxD,IAAIkH,kBAAkB,KAAKE;;YAEhCC,sBAAsBtI,KAAKoI,IAAK,KAAKE,sBAAsBrH,UAAU;eAClEqH,sBAAsB,KAAKD;;;;;WAI1C,8BAAsB9H,OAAcD,QAAgBW;UAC5CsH,8BAAkB;UAClB5I,OAAOY,MAAMZ,OAAOsB;UACpBuH,QAAU7I,OAAO,IAAM,KAAK,MAAM,IAAI;MAE1CW,OAAOhI;UACF,KAAKwP,cAAc,GACpBxH,OAAOkB,OAAQ,GAAG,GAAIH,4BAAiBC,OAAO;UAE9C6D,IAAI,KAAK/D,MAAOH;MACpBX,OAAOc,MAAO+D;MACd7E,OAAOmI,YAAa,GAAGD,yBAAalH,wBAAYA,wBAAYA,OAAQoH,aAAcH;UAC9EI,aAAc,IAAIxD,KAAMA;MAC5B7E,OAAOc,MAAOuH;MACdrI,OAAOsI,YAAa;MACpBtI,OAAOmI,YAAa,GAAGD,yBAAalH,wBAAYA,wBAAYA,OAAQoH,aAAcH;MAElFjI,OAAO0F;;;;WAGX,gBAAQzF;4EACUA;MACd,KAAKsI,UAAU7I,KAAKoI,IAAK,GAAG,KAAKS,UAAU;MAC3C,KAAKC,UAAWvI;MAChB,KAAK0H,KAAM1H,OAAO,GAAG;MACrB,KAAKwI,gBAAiBxI;MACtB,KAAK+H;MACL,KAAKH;MACL,KAAKa;;;;WAGT,mBAAWzI;;WACD,KAAKoH,eAAe,KAAKkB,UAAU;UACrCI;QACApB,UAAU;iBAAMqB,OAAKrB,SAAUtH;;QAC/B4I,OAAO,eAAArB;qBACSA,aAAa;UACzBoB,OAAKC,MAAO5I,OAAOuH;UACnBoB,OAAKL,UAAU,IAAI7I,KAAKoJ,IAAKF,OAAKnB;;QAEtCsB,MAAM,cAAAhH;qBACUA,aAAa;UACzB6G,OAAKhB,aAAa3H,MAAMZ,OAAO0C;UAC/B6G,OAAKZ,sBAAsBY,OAAKb;UAChCa,OAAKL,UAAUK,OAAKb,kBAAkB;;QAE1CiB,OAAO,eAAA3J;qBACSA,QAAQ;UACpBuJ,OAAKL,UAAUlJ;;;MAGvB,KAAKgI,YAAY4B,WAAYN;eACnBrO,IAAI,GAAG,KAAKiO,WAAW,KAAKjO,IAAI,OAAOA;QAC7C,KAAK+M,YAAYrF;;MACrB,KAAKqF,YAAY6B,iBAAiBhR;;;;WAGtC,yBAAiB+H;;UACR,KAAK2H,cAAc1P,aAAa,KAAK8P,sBAAsB;UAG5D3I,OAAO,KAAKuI;MAChB,KAAKA,aAAa1P;uBAEb6H,SAASoJ,uBACV9J,MACA,UAAEY;YACMmJ,8BAAcC;QAElBD,KAAKvB,kBAAkBwB,OAAKtB;QAE5B9H,MAAM+G,UAAWoC,MAAMA,KAAKhE,GAAGgE,KAAKrC;mDAEjB9G,MAAMqJ;;;gBAAfC;gBACAC,iBAAiB;gBAClBD,iBAAiBpC,aAAeiC,SAASG,iCAAwBH,MAAMG,OAAOC;cAC/EvJ,MAAMqJ,SAAS5D;;;;;;;;;;MAQ/BzF,MAAMwJ,aAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICtIPC;;;+BACb;+BACA;gCACC;gCACA;mCACG;;;;WAER,uBAAe/I;aAA4B,KAAK2G,sBAAUtG,SAAUL,WAAW;;;;WAC/E,uBAAeA;aAA4B,KAAK8G,sBAAUzG,SAAUL,WAAW;;;;WAC/E,gBAAQA;aAA4B,KAAKyE,qBAASpE,QAAQ,KAAK2I,cAAehJ;;;;WAC9E,gBAAQA;aAA4B,KAAKoG,qBAAS/F,QAAQ,KAAK4I,cAAejJ;;;;WAE9E;;;WACA;;;WAEA,cAAMV,OAAcqH,IAAYG;UACtBrC,IAAS,KAATA,GAAG2B,IAAM,KAANA;UACL8C,WAAW5J,MAAMyH,QAAStC,IAAIkC,IAAIP,IAAIU;UACtCqC,YAAY7J,MAAMyH,QAAStC,IAAIkC,IAAIP;UACnCgD,YAAY9J,MAAMyH,QAAStC,GAAG2B,IAAIU;UAClCuC,YAAYF,YAAYC;UACvBF,WAAWG,WAAY1C,KAAK;UAC5BuC,WAAWG,WAAYvC,KAAK;MACjC,KAAKH,MAAMA;MACX,KAAKG,MAAMA;MACX,KAAKrC,KAAKkC;MACV,KAAKP,KAAKU;;;;WAGd,kBAAUxH;UACAmF,IAAS,KAATA,GAAG2B,IAAM,KAANA;cACD9G,MAAMyH,QAAStC,GAAG2B,IAAI;;;;WAGlC,gBAAQ9G;MACJ,KAAKqH,KAAK;MACV,KAAKG,KAAK;;;;WAGd,eAAOxH;;;WAEP,cAAMA,OAAcD,QAAgBW;MAChCX,OAAOhI,OAAO+I,UAAW,KAAK4I,cAAehJ,WAAY,KAAKiJ,cAAejJ;MAC7E,KAAKsJ,qBAAsBhK,OAAOD,QAAQW;MAC1CX,OAAO0F;;;;WAGX,8BAAsBzF,OAAcD,QAAgBW;MAChDX,OAAOoB,MAAO,KAAKA;;;;SAGvB;mCAA6D,KAAKuC,YAAY4C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICrD7D2D;EAIjB,cAAa3D,MAActM;;IACvB,KAAKsM,OAAOA;IACZ,KAAKtM,KAAKA;;;;WAEd,eAAOgG,OAAcmF,GAAW2B,GAAWpG;mCACtB,KAAK4F;;;;WAE1B,cAAMtG,OAAcmF,GAAW2B,GAAW/G,QAAgBW;MACtDX,OAAOoB,MAAO,KAAKA,MAAOnB,OAAOmF,GAAG2B,GAAGpG;;;;;;gBAZ1BuJ,eACF;;;ACLntDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./src/index.ts","./src/Game.ts","./src/Timeline.ts","./src/common/clone.ts","./src/JumpTracker.ts","../geode/lib/assets.js","../geode/lib/graphics/Canvas.js","../geode/lib/math/Vector2.js","../geode/lib/math/GMath.js","../geode/lib/graphics/Color.js","../geode/lib/util.js","../geode/lib/math/geometry/BoundingBox.js","./src/levels/AgeBeforeBeauty.json","./src/loadTiledMap.ts","./src/entities/EntityBot.ts","./src/entities/Entity.ts","./src/tiles/Tile.ts","../loophole-lang/lib/interpreter/Interpreter.js","../loophole-lang/lib/util/consoleUtils.js","../loophole-lang/lib/util/ionStringify.js","../loophole-lang/lib/interpreter/Scope.js","../loophole-lang/lib/interpreter/index.js","../loophole-lang/lib/interpreter/Task.js","./node_modules/process/browser.js","../loophole-lang/lib/interpreter/TaskHandlers.js","../loophole-lang/lib/operators.js","../loophole-lang/lib/parser/parse.js","../loophole-lang/lib/parser/pegjs/parser.js","../loophole-lang/lib/parser/pegjs/index.js","../loophole-lang/lib/parser/postprocess/postprocess.js","../loophole-lang/lib/parser/postprocess/traverse.js","./src/entities/EntityDoor.ts","./src/entities/EntityPlate.ts","./src/entities/EntityMover.ts","./src/World.ts","./src/Starfield.ts","./src/common/common.ts","../geode/lib/math/Matrix3.js","./src/tiles/LoopholeTiles.ts","./src/tiles/LoopholeTiles.json","./src/tiles/loadTileset.ts","./node_modules/path-browserify/index.js","./src/Editor.ts","../geode/lib/Input.js"],"sourcesContent":[null,null,null,null,null,null,"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getJSON = exports.isFontLoaded = exports.getAudio = exports.getImage = exports.getAsset = void 0;\r\nconst cache = {};\r\nfunction getAsset(path, fromPath) {\r\n    if (cache[path])\r\n        return cache[path];\r\n    let asset = fromPath(path);\r\n    cache[path] = asset;\r\n    return asset;\r\n}\r\nexports.getAsset = getAsset;\r\nfunction assetPath(path, defaultExtension) {\r\n    if (path.indexOf(\".\") == -1)\r\n        path = path + \".\" + defaultExtension;\r\n    return \"/assets/\" + path;\r\n}\r\nfunction getImage(path) {\r\n    return getAsset(assetPath(\"images/\" + path, \"png\"), path => {\r\n        let img = new Image();\r\n        img.src = path;\r\n        return img;\r\n    });\r\n}\r\nexports.getImage = getImage;\r\nfunction getAudio(path) {\r\n    return getAsset(assetPath(\"audio/\" + path, \"mp3\"), path => new Audio(path));\r\n}\r\nexports.getAudio = getAudio;\r\nfunction isFontLoaded(font) {\r\n    return document.fonts.check(\"0px \" + font);\r\n}\r\nexports.isFontLoaded = isFontLoaded;\r\nfunction getJSON(path) {\r\n    path = assetPath(path, \"json\");\r\n    let req = new XMLHttpRequest();\r\n    return new Promise(resolve => {\r\n        req.onload = () => resolve(JSON.parse(req.response));\r\n        req.open(\"GET\", path);\r\n        req.send();\r\n    });\r\n}\r\nexports.getJSON = getJSON;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector2_1 = __importDefault(require(\"../math/Vector2\"));\r\nconst Color_1 = __importDefault(require(\"./Color\"));\r\nconst util_1 = require(\"../util\");\r\nfunction coerceFillStyle(style) {\r\n    return (style instanceof Color_1.default) ? style.toString() : style;\r\n}\r\nclass Canvas {\r\n    constructor(canvas) {\r\n        this.pixelDensity = 1;\r\n        this._imageSource = {\r\n            x: 0, y: 0,\r\n            w: 0, h: 0\r\n        };\r\n        if (typeof canvas == \"string\") {\r\n            let _canvas = document.getElementById(canvas);\r\n            if (_canvas instanceof HTMLCanvasElement)\r\n                canvas = _canvas;\r\n            else\r\n                throw new Error(\"No canvas with id: \" + canvas + \" found.\");\r\n        }\r\n        this.canvas = canvas;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.width = canvas.width;\r\n        this.height = canvas.height;\r\n    }\r\n    get dimensions() {\r\n        return new Vector2_1.default(this.width, this.height);\r\n    }\r\n    get center() {\r\n        return this.dimensions.half();\r\n    }\r\n    resize(w, h, pixelDensity = 1) {\r\n        this.width = w;\r\n        this.height = h;\r\n        if (this.canvas instanceof HTMLCanvasElement) {\r\n            this.canvas.style.width = w + \"px\";\r\n            this.canvas.style.height = h + \"px\";\r\n        }\r\n        this.canvas.width = w * pixelDensity;\r\n        this.canvas.height = h * pixelDensity;\r\n        this.pixelDensity = pixelDensity;\r\n        this.scale(pixelDensity, pixelDensity);\r\n        return this;\r\n    }\r\n    fitWindow(pixelDensity = 1) {\r\n        this.resize(innerWidth, innerHeight, pixelDensity);\r\n        return this;\r\n    }\r\n    background(style) {\r\n        let { canvas, context: c, width, height } = this;\r\n        c.fillStyle = coerceFillStyle(style);\r\n        c.fillRect(0, 0, width, height);\r\n        return this;\r\n    }\r\n    clear() {\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n        return this;\r\n    }\r\n    reset() {\r\n        this.context.resetTransform();\r\n        this.scale(this.pixelDensity, this.pixelDensity);\r\n        this.clear();\r\n    }\r\n    vline(a, b) { this.line(a.x, a.y, b.x, b.y); return this; }\r\n    line(x1, y1, x2, y2) {\r\n        let { context: c } = this;\r\n        c.beginPath();\r\n        c.moveTo(x1, y1);\r\n        c.lineTo(x2, y2);\r\n        c.closePath();\r\n        return this;\r\n    }\r\n    vrect(p, dimensions, center = false) { this.rect(p.x, p.y, dimensions.x, dimensions.y, center); return this; }\r\n    rect(x, y, w, h, centerX = false, centerY = centerX) {\r\n        let { context: c } = this;\r\n        if (centerX)\r\n            x -= w / 2;\r\n        if (centerY)\r\n            y -= h / 2;\r\n        c.beginPath();\r\n        c.rect(x, y, w, h);\r\n        c.closePath();\r\n        return this;\r\n    }\r\n    vcircle(p, r) { this.circle(p.x, p.y, r); return this; }\r\n    circle(x, y, r) {\r\n        let { context: c } = this;\r\n        c.beginPath();\r\n        c.ellipse(x, y, r, r, 0, 0, Math.PI * 2);\r\n        c.closePath();\r\n        return this;\r\n    }\r\n    stroke() {\r\n        this.context.stroke();\r\n        return this;\r\n    }\r\n    fill() {\r\n        this.context.fill();\r\n        return this;\r\n    }\r\n    strokeStyle(style) {\r\n        this.context.strokeStyle = style.toString();\r\n        return this;\r\n    }\r\n    fillStyle(style) {\r\n        this.context.fillStyle = coerceFillStyle(style);\r\n        return this;\r\n    }\r\n    lineWidth(width) {\r\n        this.context.lineWidth = width;\r\n        return this;\r\n    }\r\n    alpha(alpha) {\r\n        this.context.globalAlpha = alpha;\r\n        return this;\r\n    }\r\n    composition(operation) {\r\n        this.context.globalCompositeOperation = operation;\r\n        return this;\r\n    }\r\n    shadow(blur, color = \"black\") {\r\n        this.context.shadowBlur = blur;\r\n        this.context.shadowColor = color.toString();\r\n        return this;\r\n    }\r\n    smooth(enable) {\r\n        this.context.imageSmoothingEnabled = enable;\r\n        return this;\r\n    }\r\n    filter(options) {\r\n        if (typeof options == \"string\") {\r\n            this.context.filter = options;\r\n        }\r\n        else if (options == null) {\r\n            this.context.filter = \"none\";\r\n        }\r\n        else {\r\n            let stringified = Object.entries(options).map(([key, value]) => {\r\n                if (typeof value == \"object\")\r\n                    value = Object.values(Object).map(x => x.toString()).join(\", \");\r\n                let suffix = key == \"hueRotate\" ? \"turn\" : \"\";\r\n                return util_1.camelToDashes(key) + \"(\" + value + suffix + \")\";\r\n            }).join(\" \");\r\n            this.context.filter = stringified;\r\n        }\r\n        return this;\r\n    }\r\n    vimage(image, p, dimensions = Vector2_1.default.ZERO, center = false) { this.image(image, p.x, p.y, dimensions.x, dimensions.y, center); return this; }\r\n    image(image, dx = 0, dy = 0, w = 0, h = 0, center = false) {\r\n        if (image.width == 0)\r\n            return this;\r\n        if (center) {\r\n            w = image.width;\r\n            h = image.height;\r\n            dx -= w / 2;\r\n            dy -= h / 2;\r\n        }\r\n        else {\r\n            w = w || image.width;\r\n            h = h || image.height;\r\n        }\r\n        this.context.drawImage(image, dx, dy, w, h);\r\n        return this;\r\n    }\r\n    vpartialImage(image, p, dimensions) { this.partialImage(image, p.x, p.y, dimensions.x, dimensions.y); return this; }\r\n    partialImage(image, x = 0, y = 0, w = 0, h = 0) {\r\n        let { _imageSource: imageSource } = this;\r\n        w = w || imageSource.w;\r\n        h = h || imageSource.h;\r\n        this.context.drawImage(image, imageSource.x, imageSource.y, imageSource.w, imageSource.h, x, y, w, h);\r\n    }\r\n    vimageSource(p, dimensions) { this.imageSource(p.x, p.y, dimensions.x, dimensions.y); return this; }\r\n    imageSource(x, y, w, h) {\r\n        this._imageSource = { x, y, w, h };\r\n        return this;\r\n    }\r\n    vtranslate(p) { this.translate(p.x, p.y); return this; }\r\n    translate(x, y) {\r\n        // this.context.translate( Math.round( x ), Math.round( y ) )\r\n        this.context.translate(x, y);\r\n        return this;\r\n    }\r\n    translateToCenter() {\r\n        this.vtranslate(this.dimensions.half());\r\n        return this;\r\n    }\r\n    rotate(angle) {\r\n        this.context.rotate(angle);\r\n        return this;\r\n    }\r\n    vscale(v) { this.scale(v.x, v.y); return this; }\r\n    scale(x, y) {\r\n        this.context.scale(x, y);\r\n        return this;\r\n    }\r\n    transform(t) {\r\n        let { x, y } = t.position;\r\n        let { x: sx, y: sy } = t.scale;\r\n        let { x: cx, y: cy } = t.center;\r\n        if (t.parent)\r\n            this.transform(t.parent);\r\n        this.translate(x, y)\r\n            .rotate(t.rotation)\r\n            .scale(sx, sy)\r\n            .translate(-cx, -cy);\r\n        return this;\r\n    }\r\n    inverseTransform(t) {\r\n        let { x, y } = t.position;\r\n        let { x: sx, y: sy } = t.scale;\r\n        let { x: cx, y: cy } = t.center;\r\n        this.translate(cx, cy)\r\n            .scale(1 / sx, 1 / sy)\r\n            .rotate(-t.rotation)\r\n            .translate(-x, -y);\r\n        if (t.parent)\r\n            this.inverseTransform(t.parent);\r\n        return this;\r\n    }\r\n    applyMatrix(mat) {\r\n        let { m11, m12, m13, m21, m22, m23 } = mat;\r\n        this.context.transform(m11, m21, m12, m22, m13, m23);\r\n        return this;\r\n    }\r\n    vtext(text, p, width, font = \"50px pixel\") { this.text(text, p.x, p.y, width, font); return this; }\r\n    text(text, x, y, width, font = \"50px pixel\") {\r\n        let c = this.context;\r\n        c.font = font;\r\n        c.fillText(text, x, y, width);\r\n        return this;\r\n    }\r\n    push() {\r\n        this.context.save();\r\n        return this;\r\n    }\r\n    pop() {\r\n        this.context.restore();\r\n        return this;\r\n    }\r\n    path(coords) {\r\n        this.context.beginPath();\r\n        for (let i = 0; i < coords.length; i += 2) {\r\n            let x = coords[i];\r\n            let y = coords[i + 1];\r\n            if (i == 0)\r\n                this.context.moveTo(x, y);\r\n            else\r\n                this.context.lineTo(x, y);\r\n        }\r\n        return this;\r\n    }\r\n    vpath(points) {\r\n        this.context.beginPath();\r\n        let i = 0;\r\n        for (let p of points) {\r\n            if (i++ == 0)\r\n                this.context.moveTo(p.x, p.y);\r\n            else\r\n                this.context.lineTo(p.x, p.y);\r\n        }\r\n        return this;\r\n    }\r\n    clip() {\r\n        this.context.clip();\r\n        return this;\r\n    }\r\n    gradient(from, to, colors) {\r\n        let grad = this.context.createLinearGradient(from.x, from.y, to.x, to.y);\r\n        for (let [percent, color] of colors)\r\n            grad.addColorStop(percent, color.toString());\r\n        return grad;\r\n    }\r\n}\r\nexports.default = Canvas;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.vector = void 0;\r\nconst GMath_1 = __importDefault(require(\"./GMath\"));\r\nfunction vector(x, y) { return new Vector2(x, y); }\r\nexports.vector = vector;\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    get length() { return Math.sqrt(this.x * this.x + this.y * this.y); }\r\n    get lengthSquared() { return this.x * this.x + this.y * this.y; }\r\n    get angle() { return Math.atan2(this.y, this.x); }\r\n    unit() { return this.multiply(1 / this.length); }\r\n    leftNormal() { return new Vector2(-this.y, this.x); }\r\n    rightNormal() { return new Vector2(this.y, -this.x); }\r\n    negate() { return new Vector2(-this.x, -this.y); }\r\n    half() { return new Vector2(this.x * 0.5, this.y * 0.5); }\r\n    copy() { return new Vector2(this.x, this.y); }\r\n    floor(scale = 1) { return new Vector2(Math.floor(this.x / scale) * scale, Math.floor(this.y / scale) * scale); }\r\n    add(other) { return new Vector2(this.x + other.x, this.y + other.y); }\r\n    addXY(x, y) { return new Vector2(this.x + x, this.y + y); }\r\n    addX(x) { return new Vector2(this.x + x, this.y); }\r\n    addY(y) { return new Vector2(this.x, this.y + y); }\r\n    subtract(other) { return new Vector2(this.x - other.x, this.y - other.y); }\r\n    dot(other) { return this.x * other.x + this.y * other.y; }\r\n    cross(other) { return this.x * other.y - this.y * other.x; }\r\n    multiply(scale) { return new Vector2(this.x * scale, this.y * scale); }\r\n    stretch(x, y) { return new Vector2(this.x * x, this.y * y); }\r\n    divide(divisor) { return new Vector2(this.x / divisor, this.y / divisor); }\r\n    lerp(other, t) { return this.multiply(1 - t).add(other.multiply(t)); }\r\n    rotated(angle) {\r\n        return this.complexProduct(Vector2.polar(angle, 1));\r\n    }\r\n    isRightOf(other) {\r\n        return this.cross(other) > 0;\r\n    }\r\n    normalOnSide(side) {\r\n        if (side.isRightOf(this))\r\n            return this.rightNormal();\r\n        return this.leftNormal();\r\n    }\r\n    *[Symbol.iterator]() {\r\n        yield this.x;\r\n        yield this.y;\r\n    }\r\n    complexProduct(other) {\r\n        let x = this.x * other.x - this.y * other.y;\r\n        let y = this.x * other.y + this.y * other.x;\r\n        return new Vector2(x, y);\r\n    }\r\n    complexQuotient(other) {\r\n        let lengthSquared = other.lengthSquared;\r\n        let x = this.x * other.x + this.y * other.y;\r\n        let y = this.y * other.x - this.x * other.y;\r\n        return new Vector2(x / lengthSquared, y / lengthSquared);\r\n    }\r\n    complexExponential() {\r\n        let magnitude = Math.exp(this.x);\r\n        return new Vector2(magnitude * Math.cos(this.y), magnitude * Math.sin(this.y));\r\n    }\r\n    projection(other) {\r\n        return other.multiply(other.dot(this) / other.lengthSquared);\r\n    }\r\n    equivalent(other, epsilon = 0.000001) {\r\n        return GMath_1.default.equalivalent(this.x, other.x, epsilon) &&\r\n            GMath_1.default.equalivalent(this.y, other.y, epsilon);\r\n    }\r\n    static polar(angle, length) {\r\n        return new Vector2(Math.cos(angle) * length, Math.sin(angle) * length);\r\n    }\r\n    static lissajous(t, xPeriod, yPeriod, xAmplitude = 1, yAmplitude = xAmplitude, xPhase = 0, yPhase = 0) {\r\n        return vector(Math.cos(GMath_1.default.TAU * (t + xPhase) / xPeriod) * xAmplitude, Math.sin(GMath_1.default.TAU * (t + yPhase) / yPeriod) * yAmplitude);\r\n    }\r\n    static random(length) {\r\n        let angle = Math.random() * 2 * Math.PI;\r\n        return Vector2.polar(angle, length);\r\n    }\r\n}\r\nexports.default = Vector2;\r\nVector2.ZERO = new Vector2(0, 0);\r\nVector2.ONE = new Vector2(1, 1);\r\nVector2.RIGHT = new Vector2(1, 0);\r\nVector2.LEFT = new Vector2(-1, 0);\r\nVector2.DOWN = new Vector2(0, 1);\r\nVector2.UP = new Vector2(0, -1);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass GMath {\r\n    static modulus(n, m) {\r\n        return ((n % m) + m) % m;\r\n    }\r\n    static lerp(a, b, amount) {\r\n        return a * (1 - amount) + b * amount;\r\n    }\r\n    static clamp(x, min, max) {\r\n        if (x < min)\r\n            return min;\r\n        if (x > max)\r\n            return max;\r\n        return x;\r\n    }\r\n    static shortestRotation(from, to) {\r\n        let diff = GMath.modulus(to - from, GMath.TAU);\r\n        if (diff > Math.PI)\r\n            diff -= GMath.TAU;\r\n        return diff;\r\n    }\r\n    static angleLerp(from, to, amount) {\r\n        return from + GMath.shortestRotation(from, to) * amount;\r\n    }\r\n    static sigmoid(x) {\r\n        let exp = Math.exp(x);\r\n        return exp / (exp + 1);\r\n    }\r\n    static soften(x, softness = 1) {\r\n        function f(x) {\r\n            return x > 1 ?\r\n                x - 0.5 :\r\n                x * x / 2;\r\n        }\r\n        return f(Math.abs(x) / softness) * softness * Math.sign(x);\r\n    }\r\n    static equalivalent(a, b, epsilon = 0.000001) {\r\n        return Math.abs(a - b) <= epsilon;\r\n    }\r\n}\r\nexports.default = GMath;\r\nGMath.TAU = Math.PI * 2;\r\nGMath.degreesToRadians = GMath.TAU / 360;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rgba = exports.rgb = void 0;\r\nfunction rgb(r, g, b) {\r\n    return new Color(r, g, b);\r\n}\r\nexports.rgb = rgb;\r\nfunction rgba(r, g, b, a = 1) {\r\n    return new Color(r, g, b, a);\r\n}\r\nexports.rgba = rgba;\r\nclass Color {\r\n    constructor(r, g, b, a = 1) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    static parse(str) {\r\n        if (str[0] == \"#\") {\r\n            // Parse Hex\r\n            let parts = str.match(/[0-9a-f]{2,2}/ig).map(x => parseInt(x, 16));\r\n            return new Color(parts[0], parts[1], parts[2], (parts[3] || 255) / 255);\r\n        }\r\n        if (str.indexOf(\"(\") == -1) {\r\n            let color = Color[str];\r\n            if (!color)\r\n                throw new Error(\"unrecognized color \" + str);\r\n            return color;\r\n        }\r\n        let type = str.match(/\\w+/)[0];\r\n        let args = str.match(/\\d+/g).map(x => parseFloat(x));\r\n        switch (type) {\r\n            case \"rgb\":\r\n                return new Color(args[0], args[1], args[2]);\r\n            case \"rgba\":\r\n                return new Color(args[0], args[1], args[2], args[3]);\r\n        }\r\n    }\r\n    toString() {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`;\r\n    }\r\n}\r\nexports.default = Color;\r\nColor.aliceblue = Color.parse(\"#f0f8ff\");\r\nColor.antiquewhite = Color.parse(\"#faebd7\");\r\nColor.aqua = Color.parse(\"#00ffff\");\r\nColor.aquamarine = Color.parse(\"#7fffd4\");\r\nColor.azure = Color.parse(\"#f0ffff\");\r\nColor.beige = Color.parse(\"#f5f5dc\");\r\nColor.bisque = Color.parse(\"#ffe4c4\");\r\nColor.black = Color.parse(\"#000000\");\r\nColor.blanchedalmond = Color.parse(\"#ffebcd\");\r\nColor.blue = Color.parse(\"#0000ff\");\r\nColor.blueviolet = Color.parse(\"#8a2be2\");\r\nColor.brown = Color.parse(\"#a52a2a\");\r\nColor.burlywood = Color.parse(\"#deb887\");\r\nColor.cadetblue = Color.parse(\"#5f9ea0\");\r\nColor.chartreuse = Color.parse(\"#7fff00\");\r\nColor.chocolate = Color.parse(\"#d2691e\");\r\nColor.coral = Color.parse(\"#ff7f50\");\r\nColor.cornflowerblue = Color.parse(\"#6495ed\");\r\nColor.cornsilk = Color.parse(\"#fff8dc\");\r\nColor.crimson = Color.parse(\"#dc143c\");\r\nColor.cyan = Color.parse(\"#00ffff\");\r\nColor.darkblue = Color.parse(\"#00008b\");\r\nColor.darkcyan = Color.parse(\"#008b8b\");\r\nColor.darkgoldenrod = Color.parse(\"#b8860b\");\r\nColor.darkgray = Color.parse(\"#a9a9a9\");\r\nColor.darkgreen = Color.parse(\"#006400\");\r\nColor.darkgrey = Color.parse(\"#a9a9a9\");\r\nColor.darkkhaki = Color.parse(\"#bdb76b\");\r\nColor.darkmagenta = Color.parse(\"#8b008b\");\r\nColor.darkolivegreen = Color.parse(\"#556b2f\");\r\nColor.darkorange = Color.parse(\"#ff8c00\");\r\nColor.darkorchid = Color.parse(\"#9932cc\");\r\nColor.darkred = Color.parse(\"#8b0000\");\r\nColor.darksalmon = Color.parse(\"#e9967a\");\r\nColor.darkseagreen = Color.parse(\"#8fbc8f\");\r\nColor.darkslateblue = Color.parse(\"#483d8b\");\r\nColor.darkslategray = Color.parse(\"#2f4f4f\");\r\nColor.darkslategrey = Color.parse(\"#2f4f4f\");\r\nColor.darkturquoise = Color.parse(\"#00ced1\");\r\nColor.darkviolet = Color.parse(\"#9400d3\");\r\nColor.deeppink = Color.parse(\"#ff1493\");\r\nColor.deepskyblue = Color.parse(\"#00bfff\");\r\nColor.dimgray = Color.parse(\"#696969\");\r\nColor.dimgrey = Color.parse(\"#696969\");\r\nColor.dodgerblue = Color.parse(\"#1e90ff\");\r\nColor.firebrick = Color.parse(\"#b22222\");\r\nColor.floralwhite = Color.parse(\"#fffaf0\");\r\nColor.forestgreen = Color.parse(\"#228b22\");\r\nColor.fuchsia = Color.parse(\"#ff00ff\");\r\nColor.gainsboro = Color.parse(\"#dcdcdc\");\r\nColor.ghostwhite = Color.parse(\"#f8f8ff\");\r\nColor.goldenrod = Color.parse(\"#daa520\");\r\nColor.gold = Color.parse(\"#ffd700\");\r\nColor.gray = Color.parse(\"#808080\");\r\nColor.green = Color.parse(\"#008000\");\r\nColor.greenyellow = Color.parse(\"#adff2f\");\r\nColor.grey = Color.parse(\"#808080\");\r\nColor.honeydew = Color.parse(\"#f0fff0\");\r\nColor.hotpink = Color.parse(\"#ff69b4\");\r\nColor.indianred = Color.parse(\"#cd5c5c\");\r\nColor.indigo = Color.parse(\"#4b0082\");\r\nColor.ivory = Color.parse(\"#fffff0\");\r\nColor.khaki = Color.parse(\"#f0e68c\");\r\nColor.lavenderblush = Color.parse(\"#fff0f5\");\r\nColor.lavender = Color.parse(\"#e6e6fa\");\r\nColor.lawngreen = Color.parse(\"#7cfc00\");\r\nColor.lemonchiffon = Color.parse(\"#fffacd\");\r\nColor.lightblue = Color.parse(\"#add8e6\");\r\nColor.lightcoral = Color.parse(\"#f08080\");\r\nColor.lightcyan = Color.parse(\"#e0ffff\");\r\nColor.lightgoldenrodyellow = Color.parse(\"#fafad2\");\r\nColor.lightgray = Color.parse(\"#d3d3d3\");\r\nColor.lightgreen = Color.parse(\"#90ee90\");\r\nColor.lightgrey = Color.parse(\"#d3d3d3\");\r\nColor.lightpink = Color.parse(\"#ffb6c1\");\r\nColor.lightsalmon = Color.parse(\"#ffa07a\");\r\nColor.lightseagreen = Color.parse(\"#20b2aa\");\r\nColor.lightskyblue = Color.parse(\"#87cefa\");\r\nColor.lightslategray = Color.parse(\"#778899\");\r\nColor.lightslategrey = Color.parse(\"#778899\");\r\nColor.lightsteelblue = Color.parse(\"#b0c4de\");\r\nColor.lightyellow = Color.parse(\"#ffffe0\");\r\nColor.lime = Color.parse(\"#00ff00\");\r\nColor.limegreen = Color.parse(\"#32cd32\");\r\nColor.linen = Color.parse(\"#faf0e6\");\r\nColor.magenta = Color.parse(\"#ff00ff\");\r\nColor.maroon = Color.parse(\"#800000\");\r\nColor.mediumaquamarine = Color.parse(\"#66cdaa\");\r\nColor.mediumblue = Color.parse(\"#0000cd\");\r\nColor.mediumorchid = Color.parse(\"#ba55d3\");\r\nColor.mediumpurple = Color.parse(\"#9370db\");\r\nColor.mediumseagreen = Color.parse(\"#3cb371\");\r\nColor.mediumslateblue = Color.parse(\"#7b68ee\");\r\nColor.mediumspringgreen = Color.parse(\"#00fa9a\");\r\nColor.mediumturquoise = Color.parse(\"#48d1cc\");\r\nColor.mediumvioletred = Color.parse(\"#c71585\");\r\nColor.midnightblue = Color.parse(\"#191970\");\r\nColor.mintcream = Color.parse(\"#f5fffa\");\r\nColor.mistyrose = Color.parse(\"#ffe4e1\");\r\nColor.moccasin = Color.parse(\"#ffe4b5\");\r\nColor.navajowhite = Color.parse(\"#ffdead\");\r\nColor.navy = Color.parse(\"#000080\");\r\nColor.oldlace = Color.parse(\"#fdf5e6\");\r\nColor.olive = Color.parse(\"#808000\");\r\nColor.olivedrab = Color.parse(\"#6b8e23\");\r\nColor.orange = Color.parse(\"#ffa500\");\r\nColor.orangered = Color.parse(\"#ff4500\");\r\nColor.orchid = Color.parse(\"#da70d6\");\r\nColor.palegoldenrod = Color.parse(\"#eee8aa\");\r\nColor.palegreen = Color.parse(\"#98fb98\");\r\nColor.paleturquoise = Color.parse(\"#afeeee\");\r\nColor.palevioletred = Color.parse(\"#db7093\");\r\nColor.papayawhip = Color.parse(\"#ffefd5\");\r\nColor.peachpuff = Color.parse(\"#ffdab9\");\r\nColor.peru = Color.parse(\"#cd853f\");\r\nColor.pink = Color.parse(\"#ffc0cb\");\r\nColor.plum = Color.parse(\"#dda0dd\");\r\nColor.powderblue = Color.parse(\"#b0e0e6\");\r\nColor.purple = Color.parse(\"#800080\");\r\nColor.rebeccapurple = Color.parse(\"#663399\");\r\nColor.red = Color.parse(\"#ff0000\");\r\nColor.rosybrown = Color.parse(\"#bc8f8f\");\r\nColor.royalblue = Color.parse(\"#4169e1\");\r\nColor.saddlebrown = Color.parse(\"#8b4513\");\r\nColor.salmon = Color.parse(\"#fa8072\");\r\nColor.sandybrown = Color.parse(\"#f4a460\");\r\nColor.seagreen = Color.parse(\"#2e8b57\");\r\nColor.seashell = Color.parse(\"#fff5ee\");\r\nColor.sienna = Color.parse(\"#a0522d\");\r\nColor.silver = Color.parse(\"#c0c0c0\");\r\nColor.skyblue = Color.parse(\"#87ceeb\");\r\nColor.slateblue = Color.parse(\"#6a5acd\");\r\nColor.slategray = Color.parse(\"#708090\");\r\nColor.slategrey = Color.parse(\"#708090\");\r\nColor.snow = Color.parse(\"#fffafa\");\r\nColor.springgreen = Color.parse(\"#00ff7f\");\r\nColor.steelblue = Color.parse(\"#4682b4\");\r\nColor.tan = Color.parse(\"#d2b48c\");\r\nColor.teal = Color.parse(\"#008080\");\r\nColor.thistle = Color.parse(\"#d8bfd8\");\r\nColor.tomato = Color.parse(\"#ff6347\");\r\nColor.turquoise = Color.parse(\"#40e0d0\");\r\nColor.violet = Color.parse(\"#ee82ee\");\r\nColor.wheat = Color.parse(\"#f5deb3\");\r\nColor.white = Color.parse(\"#ffffff\");\r\nColor.whitesmoke = Color.parse(\"#f5f5f5\");\r\nColor.yellow = Color.parse(\"#ffff00\");\r\nColor.yellowgreen = Color.parse(\"#9acd32\");\r\nColor.transparent = rgba(0, 0, 0, 0);\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.argmax = exports.fitBox = exports.memoize = exports.camelToDashes = exports.splitCamel = exports.renameField = exports.frozen = void 0;\r\nconst BoundingBox_1 = __importDefault(require(\"./math/geometry/BoundingBox\"));\r\nfunction frozen(obj) {\r\n    return Object.freeze(obj);\r\n}\r\nexports.frozen = frozen;\r\nfunction renameField(obj, name, newName) {\r\n    if (obj.hasOwnProperty(name)) {\r\n        obj[newName] = obj[name];\r\n        delete obj[name];\r\n    }\r\n}\r\nexports.renameField = renameField;\r\nfunction splitCamel(str) {\r\n    return str.match(/[A-Za-z_][a-z0-9_]+/g);\r\n}\r\nexports.splitCamel = splitCamel;\r\nfunction camelToDashes(str) {\r\n    return (splitCamel(str) || []).join(\"-\").toLowerCase();\r\n}\r\nexports.camelToDashes = camelToDashes;\r\nfunction memoize(func) {\r\n    let cache = {};\r\n    return (arg) => {\r\n        let cached = cache[arg];\r\n        if (cached !== undefined)\r\n            return cached;\r\n        let value = func(arg);\r\n        cache[arg] = value;\r\n        return value;\r\n    };\r\n}\r\nexports.memoize = memoize;\r\nfunction fitBox(inner, outer) {\r\n    let xRatio = outer.dimensions.x / inner.dimensions.x;\r\n    let yRatio = outer.dimensions.y / inner.dimensions.y;\r\n    let minRatio = Math.min(xRatio, yRatio);\r\n    let dimensions = inner.dimensions.multiply(minRatio);\r\n    let room = outer.dimensions.subtract(dimensions);\r\n    let offset = room.half();\r\n    return new BoundingBox_1.default(dimensions, outer.position.add(offset));\r\n}\r\nexports.fitBox = fitBox;\r\nfunction argmax(values, func) {\r\n    let best = func(values[0]);\r\n    let bestIndex = 0;\r\n    for (let i = 0; i < values.length; i++) {\r\n        let score = func(values[i]);\r\n        if (score > best) {\r\n            best = score;\r\n            bestIndex = i;\r\n        }\r\n    }\r\n    return { best, bestIndex, bestArg: values[bestIndex] };\r\n}\r\nexports.argmax = argmax;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector2_1 = __importDefault(require(\"../Vector2\"));\r\nclass BoundingBox {\r\n    constructor(dimensions, position = Vector2_1.default.ZERO) {\r\n        this.dimensions = dimensions;\r\n        this.position = position;\r\n    }\r\n}\r\nexports.default = BoundingBox;\r\n",null,null,null,null,null,"\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst consoleUtils_1 = require(\"../util/consoleUtils\");\r\nconst Scope_1 = require(\"./Scope\");\r\nconst Task_1 = require(\"./Task\");\r\nconst _1 = require(\".\");\r\nconst parse_1 = __importDefault(require(\"../parser/parse\"));\r\nclass Interpreter {\r\n    constructor(source) {\r\n        this.source = source;\r\n        let ast = parse_1.default(source);\r\n        this.engineScope = new Scope_1.Scope();\r\n        this.task = Task_1.Task.root(ast, this.engineScope);\r\n    }\r\n    setNatives(nativeBindings) {\r\n        this.nativeBindings = nativeBindings;\r\n        for (let name in nativeBindings) {\r\n            if (!this.engineScope.get(name))\r\n                this.engineScope.set(name, new _1.NativeFunction(name));\r\n        }\r\n        return this;\r\n    }\r\n    step() {\r\n        if (this.task)\r\n            this.task = this.task.stepAndGetNextTask(this);\r\n    }\r\n    run(maxSteps = Infinity) {\r\n        let step = 0;\r\n        while (this.task) {\r\n            if (step++ == maxSteps)\r\n                break;\r\n            this.step();\r\n            // console.log(this.location)\r\n        }\r\n        if (this.task)\r\n            consoleUtils_1.warn(`Program reached the maximum number of allowed steps. (${maxSteps})`);\r\n        else\r\n            consoleUtils_1.success(`Program finished in ${step - 1} steps.`);\r\n    }\r\n    get location() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.task) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b.location;\r\n    }\r\n}\r\nexports.default = Interpreter;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.success = exports.warn = exports.fail = exports.colors = exports.wrapText = exports.endDivider = exports.startDivider = exports.prettyPrint = void 0;\r\nconst ionStringify_1 = __importDefault(require(\"./ionStringify\"));\r\nfunction prettyPrint(obj, indentation = 4) {\r\n    // console.log( ionStringify( obj, indentation ).replace( /\"/g, \"\" ) )\r\n    console.log(ionStringify_1.default(obj, indentation));\r\n}\r\nexports.prettyPrint = prettyPrint;\r\nfunction startDivider(label) {\r\n    let line = \"\\n=============================================\";\r\n    let lineChars = line.split(\"\");\r\n    let labelChars = (\"[ \" + label + \" ]\").split(\"\");\r\n    lineChars.splice(4, labelChars.length, ...labelChars);\r\n    console.log(lineChars.join(\"\"));\r\n}\r\nexports.startDivider = startDivider;\r\nfunction endDivider() {\r\n    console.log(\"=============================================\\n\");\r\n}\r\nexports.endDivider = endDivider;\r\nfunction wrapText(str, maxWidth) {\r\n    maxWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : Math.floor(Math.sqrt(str.length * 4));\r\n    let regex = new RegExp(`.{1,${maxWidth}}`, \"g\");\r\n    return str.match(regex);\r\n}\r\nexports.wrapText = wrapText;\r\nexports.colors = {\r\n    black: \"\\u001b[30m\",\r\n    red: \"\\u001b[31m\",\r\n    green: \"\\u001b[32m\",\r\n    yellow: \"\\u001b[33m\",\r\n    blue: \"\\u001b[34m\",\r\n    magenta: \"\\u001b[35m\",\r\n    cyan: \"\\u001b[36m\",\r\n    white: \"\\u001b[37m\",\r\n    brightBlack: \"\\u001b[30;1m\",\r\n    brightRed: \"\\u001b[31;1m\",\r\n    brightGreen: \"\\u001b[32;1m\",\r\n    brightYellow: \"\\u001b[33;1m\",\r\n    brightBlue: \"\\u001b[34;1m\",\r\n    brightMagenta: \"\\u001b[35;1m\",\r\n    brightCyan: \"\\u001b[36;1m\",\r\n    brightWhite: \"\\u001b[37;1m\",\r\n    reset: \"\\u001b[0m\"\r\n};\r\nfunction fail(text) { console.log(exports.colors.red + text + exports.colors.reset); }\r\nexports.fail = fail;\r\nfunction warn(text) { console.log(exports.colors.yellow + text + exports.colors.reset); }\r\nexports.warn = warn;\r\nfunction success(text) { console.log(exports.colors.green + text + exports.colors.reset); }\r\nexports.success = success;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction ionStringify(obj, indentation = 4, maxInlineLength = 60) {\r\n    let dentPrime = new Array(indentation + 1).join(\" \");\r\n    function isValueType(object) { return typeof object != \"object\" || object === null; }\r\n    function inlineStringify(obj) {\r\n        let result = [];\r\n        function internal(obj) {\r\n            if (isValueType(obj))\r\n                return result.push(obj === undefined\r\n                    ? \"undefined\"\r\n                    : JSON.stringify(obj));\r\n            let i = 0;\r\n            if (Array.isArray(obj)) {\r\n                if (obj.length == 0)\r\n                    return result.push(\"[]\");\r\n                result.push(\"[ \");\r\n                for (let e of obj) {\r\n                    if (i++ > 0)\r\n                        result.push(\",\");\r\n                    internal(e);\r\n                }\r\n                result.push(\" ]\");\r\n            }\r\n            else {\r\n                if (Object.keys(obj).length == 0)\r\n                    return result.push(\"{}\");\r\n                result.push(\"{ \");\r\n                for (let k in obj) {\r\n                    let v = obj[k];\r\n                    if (i++ > 0)\r\n                        result.push(\", \");\r\n                    result.push(k + \": \");\r\n                    internal(v);\r\n                }\r\n                result.push(\" }\");\r\n            }\r\n        }\r\n        internal(obj);\r\n        return result.join(\"\");\r\n    }\r\n    let parts = [];\r\n    function internal(obj, dent) {\r\n        if (isValueType(obj))\r\n            return parts.push(obj === undefined\r\n                ? \"undefined\"\r\n                : JSON.stringify(obj));\r\n        let str = inlineStringify(obj);\r\n        if (str.length < maxInlineLength)\r\n            return parts.push(str);\r\n        dent = dent + dentPrime;\r\n        if (Array.isArray(obj)) {\r\n            parts.push(\"[]\");\r\n            for (let e of obj) {\r\n                parts.push(\"\\n\" + dent);\r\n                internal(e, dent);\r\n            }\r\n        }\r\n        else {\r\n            parts.push(\"{}\");\r\n            for (let k in obj) {\r\n                let v = obj[k];\r\n                parts.push(\"\\n\" + dent + k + \": \");\r\n                internal(v, dent);\r\n            }\r\n        }\r\n    }\r\n    internal(obj, \"\");\r\n    return parts.join(\"\");\r\n}\r\nexports.default = ionStringify;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Scope = void 0;\r\nconst _1 = require(\".\");\r\nclass Scope {\r\n    constructor(parent) {\r\n        this.values = new _1.Table();\r\n        this.outerScope = parent;\r\n    }\r\n    lookupScope(name) {\r\n        if (typeof name != \"string\")\r\n            throw new Error(\"Variable names must be strings.\");\r\n        let scope = this;\r\n        while (scope) {\r\n            if (scope.values.get(name) !== undefined)\r\n                return scope;\r\n            scope = scope.outerScope;\r\n        }\r\n    }\r\n    get(name) {\r\n        var _a;\r\n        let values = (_a = this.lookupScope(name)) === null || _a === void 0 ? void 0 : _a.values;\r\n        if (values)\r\n            return values.get(name);\r\n    }\r\n    set(name, value) {\r\n        var _a;\r\n        let scope = (_a = this.lookupScope(name)) !== null && _a !== void 0 ? _a : this;\r\n        scope.values.set(name, value);\r\n    }\r\n    setLocal(name, value) {\r\n        this.values.set(name, value);\r\n    }\r\n}\r\nexports.Scope = Scope;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Table = exports.Closure = exports.NativeFunction = void 0;\r\nclass NativeFunction {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nexports.NativeFunction = NativeFunction;\r\nclass Closure {\r\n    constructor(node, scope) {\r\n        this.node = node;\r\n        this.scope = scope;\r\n    }\r\n}\r\nexports.Closure = Closure;\r\n// We have to use these because we want to safely handle dangerous keys like __proto__ or constructor, \r\n// and we don't want to use Maps which would complicate cloning and comparison in Loophole.\r\nclass Table {\r\n    constructor() {\r\n        this.values = {};\r\n    }\r\n    set(key, value) {\r\n        key = \".\" + key;\r\n        this.values[key] = value;\r\n    }\r\n    get(key) {\r\n        key = \".\" + key;\r\n        return this.values[key];\r\n    }\r\n    keys() {\r\n        return this.values.keys.map(key => key.slice(1));\r\n    }\r\n}\r\nexports.Table = Table;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Task = void 0;\r\nconst TaskHandlers_1 = __importDefault(require(\"./TaskHandlers\"));\r\nconst consoleUtils_1 = require(\"../util/consoleUtils\");\r\nclass Task {\r\n    constructor(node) {\r\n        this.done = false;\r\n        this.step = 0;\r\n        this.node = node;\r\n    }\r\n    static child(node, instigator, returnKey) {\r\n        let result = new Task(node);\r\n        result.instigator = instigator;\r\n        result.scope = instigator === null || instigator === void 0 ? void 0 : instigator.scope;\r\n        result.returnKey = returnKey;\r\n        return result;\r\n    }\r\n    static root(ast, engineScope) {\r\n        let result = new Task(ast);\r\n        result.scope = engineScope;\r\n        return result;\r\n    }\r\n    exit() { this.done = true; }\r\n    return(value) {\r\n        var _a;\r\n        this.done = true;\r\n        if (this.instigator && this.returnKey !== undefined) {\r\n            this.instigator.returns = (_a = this.instigator.returns) !== null && _a !== void 0 ? _a : {};\r\n            this.instigator.returns[this.returnKey] = value;\r\n        }\r\n    }\r\n    /** Call if jumping within tasks, otherwise call jumpInto. */\r\n    jump(step) {\r\n        this.step = step - 1;\r\n    }\r\n    /** Call if jumping from a different task, otherwise call jump. */\r\n    jumpInto(step) {\r\n        this.step = step;\r\n    }\r\n    /** Advances the state of the current task and possibly returns a different task to run.\r\n     * Returned task can be either a sub task or the instigating task. */\r\n    stepAndGetNextTask(interpreter) {\r\n        let type = this.node.type;\r\n        let handler = TaskHandlers_1.default[type];\r\n        if (!handler) {\r\n            consoleUtils_1.fail(\"\\nError: No step handler for type \" + type);\r\n            process.stdout.write(consoleUtils_1.colors.red);\r\n            consoleUtils_1.prettyPrint(this.node);\r\n            console.log(consoleUtils_1.colors.reset);\r\n            throw new Error(\"No step handler for type \" + type);\r\n        }\r\n        let next = handler.step(this, interpreter);\r\n        if (this.done) {\r\n            return this.instigator;\r\n        }\r\n        else {\r\n            this.step++;\r\n            if (next)\r\n                return next;\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.Task = Task;\r\n",null,"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Task_1 = require(\"./Task\");\r\nconst operators_1 = require(\"../operators\");\r\nconst Scope_1 = require(\"./Scope\");\r\nconst _1 = require(\".\");\r\nconst taskHandlers = {\r\n    Program: task => {\r\n        if (task.step == 0)\r\n            return Task_1.Task.child(task.node.body, task);\r\n        else\r\n            task.exit();\r\n    },\r\n    Block: task => {\r\n        let { step, node } = task;\r\n        let { body } = node;\r\n        if (step == 0)\r\n            task.scope = new Scope_1.Scope(task.scope);\r\n        if (step < body.length)\r\n            return Task_1.Task.child(body[step], task);\r\n        else\r\n            task.exit();\r\n    },\r\n    Literal: task => { task.return(task.node.value); },\r\n    Identifier: task => {\r\n        let result = task.scope.get(task.node.name);\r\n        if (result == undefined)\r\n            throw new Error(\"Variable is not defined in current scope: \" + task.node.name);\r\n        task.return(result);\r\n    },\r\n    FunctionExpression: task => { task.return(new _1.Closure(task.node, task.scope)); },\r\n    FunctionDeclaration: task => {\r\n        let { node, scope } = task;\r\n        let { name, expression } = node;\r\n        scope.set(name.name, new _1.Closure(expression, scope));\r\n        task.exit();\r\n    },\r\n    Assignment: task => {\r\n        let { step, node } = task;\r\n        if (step == 0)\r\n            return Task_1.Task.child(node.right, task, \"rval\");\r\n        if (step == 1) {\r\n            task.scope.set(node.left.name, task.returns.rval);\r\n            task.exit();\r\n        }\r\n    },\r\n    MemberAssignment: task => {\r\n        let { step, node } = task;\r\n        if (step == 0)\r\n            return Task_1.Task.child(node.left.object, task, \"object\");\r\n        if (step == 1)\r\n            return Task_1.Task.child(node.left.key, task, \"key\");\r\n        if (step == 2)\r\n            return Task_1.Task.child(node.right, task, \"rval\");\r\n        if (step == 3) {\r\n            let { object, key, rval } = task.returns;\r\n            if (object instanceof _1.Table) {\r\n                object.set(key, rval);\r\n            }\r\n            else {\r\n                throw new Error(\"Tried to write member of non-table object.\");\r\n            }\r\n            task.exit();\r\n        }\r\n    },\r\n    MemberExpression: task => {\r\n        let { step, node } = task;\r\n        if (step == 0)\r\n            return Task_1.Task.child(node.object, task, \"object\");\r\n        if (step == 1)\r\n            return Task_1.Task.child(node.key, task, \"key\");\r\n        let { object, key } = task.returns;\r\n        if (object instanceof _1.Table) {\r\n            task.return(object.get(key));\r\n        }\r\n        else if (typeof object == \"string\") {\r\n            task.return(object.charAt(key));\r\n        }\r\n        else {\r\n            throw new Error(\"Tried to read member of non-table object.\");\r\n        }\r\n    },\r\n    ObjectLiteral: task => {\r\n        let { step, node } = task;\r\n        let { pairs } = node;\r\n        if (step < pairs.length * 2) {\r\n            let index = Math.floor(step / 2);\r\n            let isKey = step % 2 == 0;\r\n            let subtask = pairs[index][isKey ? \"key\" : \"value\"];\r\n            return Task_1.Task.child(subtask, task, step);\r\n        }\r\n        else {\r\n            let result = new _1.Table();\r\n            for (let i = 0; i < pairs.length; i++) {\r\n                let key = task.returns[i * 2];\r\n                let value = task.returns[i * 2 + 1];\r\n                result.set(key, value);\r\n            }\r\n            task.return(result);\r\n        }\r\n    },\r\n    BinaryOperation: task => {\r\n        let { step, node } = task;\r\n        if (step == 0)\r\n            return Task_1.Task.child(node.left, task, \"left\");\r\n        if (step == 1)\r\n            return Task_1.Task.child(node.right, task, \"right\");\r\n        task.return(operators_1.evalOperation(node.operation, task.returns.left, task.returns.right));\r\n    },\r\n    CallExpression: (task, interpreter) => {\r\n        let { step, node } = task;\r\n        switch (step) {\r\n            case 0: return Task_1.Task.child(node.callee, task, \"callee\");\r\n            case 1: return Task_1.Task.child(node.args, task, \"args\");\r\n            case 2:\r\n                let args = task.returns.args;\r\n                let callee = task.returns.callee;\r\n                if (callee instanceof _1.Closure) {\r\n                    let fnNode = callee.node;\r\n                    let callCtx = Task_1.Task.child(fnNode.body, task, \"result\");\r\n                    callCtx.scope = new Scope_1.Scope(callee.scope);\r\n                    // Prepare scope with passed params.\r\n                    for (let i = 0; i < fnNode.args.length; i++)\r\n                        callCtx.scope.setLocal(fnNode.args[i].name, args[i]);\r\n                    return callCtx;\r\n                }\r\n                else if (callee instanceof _1.NativeFunction) {\r\n                    if (!interpreter.nativeBindings)\r\n                        throw new Error(\"No native bindings provided.\");\r\n                    let native = interpreter.nativeBindings[callee.name];\r\n                    if (!native)\r\n                        throw new Error(\"No native binding for \" + callee.name + \" provided.\");\r\n                    let result = native.apply(null, args);\r\n                    task.return(result);\r\n                    return;\r\n                }\r\n                else {\r\n                    throw new Error(`Callee (${callee}) is not a function.`);\r\n                }\r\n            case 3: task.return(task.returns.result);\r\n        }\r\n    },\r\n    Arguments: task => {\r\n        let { step, node } = task;\r\n        let { values } = node;\r\n        if (step == 0)\r\n            task.returns = [];\r\n        if (step < values.length)\r\n            return Task_1.Task.child(values[step], task, step);\r\n        task.return(task.returns);\r\n    },\r\n    IfStatement: task => {\r\n        let { step, node, returns } = task;\r\n        switch (step) {\r\n            case 0: return Task_1.Task.child(node.test, task, \"test\");\r\n            case 1:\r\n                if (!returns.test)\r\n                    return task.exit();\r\n                return Task_1.Task.child(node.body, task);\r\n            case 2: task.exit();\r\n        }\r\n    },\r\n    WhileStatement: {\r\n        step: task => {\r\n            let { step, node, returns } = task;\r\n            switch (step) {\r\n                case 0: return Task_1.Task.child(node.test, task, \"test\");\r\n                case 1:\r\n                    if (!returns.test)\r\n                        return task.exit();\r\n                    return Task_1.Task.child(node.body, task);\r\n                case 2:\r\n                    return task.jump(0);\r\n            }\r\n        },\r\n        continue: task => {\r\n            task.jumpInto(0);\r\n            return task;\r\n        },\r\n        break: task => task.instigator\r\n    },\r\n    ForStatement: {\r\n        step: task => {\r\n            let { step, node, returns } = task;\r\n            let { init, test, update, body } = node;\r\n            switch (step) {\r\n                case 0: return Task_1.Task.child(init, task);\r\n                case 1: return Task_1.Task.child(test, task, \"test\");\r\n                case 2:\r\n                    if (!returns.test)\r\n                        return task.exit();\r\n                    else\r\n                        return Task_1.Task.child(body, task);\r\n                case 3: return Task_1.Task.child(update, task);\r\n                case 4: return task.jump(1);\r\n            }\r\n        },\r\n        continue: task => {\r\n            task.jumpInto(3);\r\n            return task;\r\n        },\r\n        break: task => task.instigator\r\n    },\r\n    BreakStatement: (task, interpreter) => {\r\n        let ancestorTask = task;\r\n        while (ancestorTask) {\r\n            let type = ancestorTask.node.type;\r\n            let handler = TaskHandlers[type];\r\n            if (handler.break)\r\n                return handler.break(ancestorTask, interpreter);\r\n            ancestorTask = ancestorTask.instigator;\r\n        }\r\n    },\r\n    ContinueStatement: (task, interpreter) => {\r\n        let ancestorTask = task;\r\n        while (ancestorTask) {\r\n            let type = ancestorTask.node.type;\r\n            let handler = TaskHandlers[type];\r\n            if (handler.continue)\r\n                return handler.continue(ancestorTask, interpreter);\r\n            ancestorTask = ancestorTask.instigator;\r\n        }\r\n    },\r\n    ReturnStatement: task => {\r\n        var _a;\r\n        let { step, node } = task;\r\n        if (step == 0)\r\n            return Task_1.Task.child(node.result, task, \"result\");\r\n        let ancestorTask = task;\r\n        while (ancestorTask) {\r\n            let instigatorType = (_a = ancestorTask.instigator) === null || _a === void 0 ? void 0 : _a.node.type;\r\n            if (instigatorType == \"CallExpression\") {\r\n                ancestorTask.return(task.returns.result);\r\n                return ancestorTask.instigator;\r\n            }\r\n            ancestorTask = ancestorTask.instigator;\r\n        }\r\n    }\r\n};\r\nconst TaskHandlers = {};\r\nfor (let key in taskHandlers) {\r\n    let handler = taskHandlers[key];\r\n    if (typeof handler == \"object\")\r\n        TaskHandlers[key] = handler;\r\n    else\r\n        TaskHandlers[key] = { step: handler };\r\n}\r\nexports.default = TaskHandlers;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.operatorPrecedences = exports.evalOperation = void 0;\r\nconst operators = [\r\n    [\"==\", \"!=\"],\r\n    [\">\", \"<\", \">=\", \"<=\"],\r\n    [\"+\", \"-\"],\r\n    [\"*\", \"/\", \"%\"],\r\n    [\"**\"]\r\n];\r\nexports.default = operators;\r\nfunction evalOperation(operator, leftOperand, rightOperand) {\r\n    let operation = operations[operator];\r\n    if (!operation)\r\n        throw new Error(\"Unsupported binary operation: \" + operator);\r\n    return operation(leftOperand, rightOperand);\r\n}\r\nexports.evalOperation = evalOperation;\r\nconst operations = (() => {\r\n    let result = {};\r\n    for (let op of operators.flat())\r\n        result[op] = new Function(\"a\", \"b\", `return a ${op} b`);\r\n    return result;\r\n})();\r\nexports.operatorPrecedences = buildPrecedenceTable(operators);\r\nfunction buildPrecedenceTable(groups) {\r\n    let result = {};\r\n    for (let p = 0; p < groups.length; p++)\r\n        for (let operator of groups[p])\r\n            result[operator] = p;\r\n    return result;\r\n}\r\nfunction pegjsRule() {\r\n    let ops = operators.flat();\r\n    // Sort the operators from largest to shortest so we don't accidentally match part of an operator.\r\n    ops.sort((a, b) => b.length - a.length);\r\n    return ops.map(op => JSON.stringify(op)).join(\" / \");\r\n}\r\n// console.log( pegjsRule() )\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst parser_1 = __importDefault(require(\"./pegjs/parser\"));\r\nconst postprocess_1 = __importDefault(require(\"./postprocess/postprocess\"));\r\nfunction parse(source) {\r\n    return postprocess_1.default(parser_1.default.parse(source));\r\n}\r\nexports.default = parse;\r\n","/*\r\n * Generated by PEG.js 0.10.0.\r\n *\r\n * http://pegjs.org/\r\n */\r\n\"use strict\";\r\nfunction peg$subclass(child, parent) {\r\n    function ctor() { this.constructor = child; }\r\n    ctor.prototype = parent.prototype;\r\n    child.prototype = new ctor();\r\n}\r\nfunction peg$SyntaxError(message, expected, found, location) {\r\n    this.message = message;\r\n    this.expected = expected;\r\n    this.found = found;\r\n    this.location = location;\r\n    this.name = \"SyntaxError\";\r\n    if (typeof Error.captureStackTrace === \"function\") {\r\n        Error.captureStackTrace(this, peg$SyntaxError);\r\n    }\r\n}\r\npeg$subclass(peg$SyntaxError, Error);\r\npeg$SyntaxError.buildMessage = function (expected, found) {\r\n    var DESCRIBE_EXPECTATION_FNS = {\r\n        literal: function (expectation) {\r\n            return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n        },\r\n        \"class\": function (expectation) {\r\n            var escapedParts = \"\", i;\r\n            for (i = 0; i < expectation.parts.length; i++) {\r\n                escapedParts += expectation.parts[i] instanceof Array\r\n                    ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\r\n                    : classEscape(expectation.parts[i]);\r\n            }\r\n            return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\r\n        },\r\n        any: function (expectation) {\r\n            return \"any character\";\r\n        },\r\n        end: function (expectation) {\r\n            return \"end of input\";\r\n        },\r\n        other: function (expectation) {\r\n            return expectation.description;\r\n        }\r\n    };\r\n    function hex(ch) {\r\n        return ch.charCodeAt(0).toString(16).toUpperCase();\r\n    }\r\n    function literalEscape(s) {\r\n        return s\r\n            .replace(/\\\\/g, '\\\\\\\\')\r\n            .replace(/\"/g, '\\\\\"')\r\n            .replace(/\\0/g, '\\\\0')\r\n            .replace(/\\t/g, '\\\\t')\r\n            .replace(/\\n/g, '\\\\n')\r\n            .replace(/\\r/g, '\\\\r')\r\n            .replace(/[\\x00-\\x0F]/g, function (ch) { return '\\\\x0' + hex(ch); })\r\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return '\\\\x' + hex(ch); });\r\n    }\r\n    function classEscape(s) {\r\n        return s\r\n            .replace(/\\\\/g, '\\\\\\\\')\r\n            .replace(/\\]/g, '\\\\]')\r\n            .replace(/\\^/g, '\\\\^')\r\n            .replace(/-/g, '\\\\-')\r\n            .replace(/\\0/g, '\\\\0')\r\n            .replace(/\\t/g, '\\\\t')\r\n            .replace(/\\n/g, '\\\\n')\r\n            .replace(/\\r/g, '\\\\r')\r\n            .replace(/[\\x00-\\x0F]/g, function (ch) { return '\\\\x0' + hex(ch); })\r\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return '\\\\x' + hex(ch); });\r\n    }\r\n    function describeExpectation(expectation) {\r\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\r\n    }\r\n    function describeExpected(expected) {\r\n        var descriptions = new Array(expected.length), i, j;\r\n        for (i = 0; i < expected.length; i++) {\r\n            descriptions[i] = describeExpectation(expected[i]);\r\n        }\r\n        descriptions.sort();\r\n        if (descriptions.length > 0) {\r\n            for (i = 1, j = 1; i < descriptions.length; i++) {\r\n                if (descriptions[i - 1] !== descriptions[i]) {\r\n                    descriptions[j] = descriptions[i];\r\n                    j++;\r\n                }\r\n            }\r\n            descriptions.length = j;\r\n        }\r\n        switch (descriptions.length) {\r\n            case 1:\r\n                return descriptions[0];\r\n            case 2:\r\n                return descriptions[0] + \" or \" + descriptions[1];\r\n            default:\r\n                return descriptions.slice(0, -1).join(\", \")\r\n                    + \", or \"\r\n                    + descriptions[descriptions.length - 1];\r\n        }\r\n    }\r\n    function describeFound(found) {\r\n        return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\r\n    }\r\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n};\r\nfunction peg$parse(input, options) {\r\n    options = options !== void 0 ? options : {};\r\n    var peg$FAILED = {}, peg$startRuleFunctions = { Program: peg$parseProgram }, peg$startRuleFunction = peg$parseProgram, peg$c0 = function (body) { return node(\"Program\", { body }); }, peg$c1 = peg$otherExpectation(\"statement\"), peg$c2 = peg$otherExpectation(\"assignment\"), peg$c3 = \"=\", peg$c4 = peg$literalExpectation(\"=\", false), peg$c5 = function (left, right) { return node(\"Assignment\", { left, right }); }, peg$c6 = peg$otherExpectation(\"member assignment\"), peg$c7 = function (left) { return left.type == \"MemberExpression\"; }, peg$c8 = function (left, right) { return node(\"MemberAssignment\", { left, right }); }, peg$c9 = peg$otherExpectation(\"function declaration\"), peg$c10 = function (name, expression) { return node(\"FunctionDeclaration\", { name, expression }); }, peg$c11 = peg$otherExpectation(\"if\"), peg$c12 = \"(\", peg$c13 = peg$literalExpectation(\"(\", false), peg$c14 = \")\", peg$c15 = peg$literalExpectation(\")\", false), peg$c16 = function (test, body) { return node(\"IfStatement\", { test, body }); }, peg$c17 = peg$otherExpectation(\"while\"), peg$c18 = function (test, body) { return node(\"WhileStatement\", { test, body }); }, peg$c19 = peg$otherExpectation(\"for\"), peg$c20 = \";\", peg$c21 = peg$literalExpectation(\";\", false), peg$c22 = function (init, test, update, body) { return node(\"ForStatement\", { init, test, update, body }); }, peg$c23 = \"{\", peg$c24 = peg$literalExpectation(\"{\", false), peg$c25 = \"}\", peg$c26 = peg$literalExpectation(\"}\", false), peg$c27 = function (body) { return body; }, peg$c28 = peg$otherExpectation(\"break\"), peg$c29 = function () { return node(\"BreakStatement\", {}); }, peg$c30 = peg$otherExpectation(\"continue\"), peg$c31 = function () { return node(\"ContinueStatement\", {}); }, peg$c32 = peg$otherExpectation(\"return\"), peg$c33 = function (result) { return node(\"ReturnStatement\", { result }); }, peg$c34 = function (head, res) { return res; }, peg$c35 = function (head, tail) { return node(\"Block\", { body: [head].concat(tail) }); }, peg$c36 = function () { return node(\"Block\", { body: [] }); }, peg$c37 = peg$otherExpectation(\"expression\"), peg$c38 = peg$otherExpectation(\"binary operation\"), peg$c39 = function (head, operator, operand) { return { operator, operand }; }, peg$c40 = function (head, tail) { return orderOperations({ head, tail }); }, peg$c41 = function (head, operator) { return operator; }, peg$c42 = function (head, tail) { return buildMemberCallExpression({ head, tail }); }, peg$c43 = peg$otherExpectation(\"call\"), peg$c44 = function (args) { return node(\"CallExpression\", { args }); }, peg$c45 = peg$otherExpectation(\"arguments\"), peg$c46 = \",\", peg$c47 = peg$literalExpectation(\",\", false), peg$c48 = function (head, val) { return val; }, peg$c49 = function (head, tail) { return node(\"Arguments\", { values: [head].concat(tail) }); }, peg$c50 = function () { return node(\"Arguments\", { values: [] }); }, peg$c51 = peg$otherExpectation(\"member\"), peg$c52 = \"[\", peg$c53 = peg$literalExpectation(\"[\", false), peg$c54 = \"]\", peg$c55 = peg$literalExpectation(\"]\", false), peg$c56 = function (key) { return node(\"MemberExpression\", { key }); }, peg$c57 = \".\", peg$c58 = peg$literalExpectation(\".\", false), peg$c59 = function (expression) { return expression; }, peg$c60 = peg$otherExpectation(\"function\"), peg$c61 = function (args, body) { return node(\"FunctionExpression\", { args: args || [], body }); }, peg$c62 = peg$otherExpectation(\"parameters\"), peg$c63 = function (head, tail) { return [head].concat(tail); }, peg$c64 = peg$otherExpectation(\"object\"), peg$c65 = \":\", peg$c66 = peg$literalExpectation(\":\", false), peg$c67 = function (key, value) { return { key, value }; }, peg$c68 = function (pairs) { return node(\"ObjectLiteral\", { pairs }); }, peg$c69 = peg$otherExpectation(\"property\"), peg$c70 = function (id) { return node(\"Literal\", { value: id.name }); }, peg$c71 = peg$otherExpectation(\"literal\"), peg$c72 = function (value) { return node(\"Literal\", { value }); }, peg$c73 = \"E\", peg$c74 = peg$literalExpectation(\"E\", false), peg$c75 = \"+\", peg$c76 = peg$literalExpectation(\"+\", false), peg$c77 = \"-\", peg$c78 = peg$literalExpectation(\"-\", false), peg$c79 = function (text) { return parseFloat(text); }, peg$c80 = /^[0-9]/, peg$c81 = peg$classExpectation([[\"0\", \"9\"]], false, false), peg$c82 = function (digits) { return parseInt(digits); }, peg$c83 = function () { return true; }, peg$c84 = function () { return false; }, peg$c85 = function () { return null; }, peg$c86 = \"\\\"\", peg$c87 = peg$literalExpectation(\"\\\"\", false), peg$c88 = function () { return JSON.parse(text()); }, peg$c89 = /^[^\\r\\n\\t\\x08\\f\"]/, peg$c90 = peg$classExpectation([\"\\r\", \"\\n\", \"\\t\", \"\\b\", \"\\f\", \"\\\"\"], true, false), peg$c91 = \"\\\\\", peg$c92 = peg$literalExpectation(\"\\\\\", false), peg$c93 = /^[rn\"]/, peg$c94 = peg$classExpectation([\"r\", \"n\", \"\\\"\"], false, false), peg$c95 = \"u\", peg$c96 = peg$literalExpectation(\"u\", false), peg$c97 = /^[0-9A-Fa-f]/, peg$c98 = peg$classExpectation([[\"0\", \"9\"], [\"A\", \"F\"], [\"a\", \"f\"]], false, false), peg$c99 = peg$otherExpectation(\"identifier\"), peg$c100 = function (text) { return node(\"Identifier\", { name: text }); }, peg$c101 = \"==\", peg$c102 = peg$literalExpectation(\"==\", false), peg$c103 = \"!=\", peg$c104 = peg$literalExpectation(\"!=\", false), peg$c105 = \">=\", peg$c106 = peg$literalExpectation(\">=\", false), peg$c107 = \"<=\", peg$c108 = peg$literalExpectation(\"<=\", false), peg$c109 = \"**\", peg$c110 = peg$literalExpectation(\"**\", false), peg$c111 = \">\", peg$c112 = peg$literalExpectation(\">\", false), peg$c113 = \"<\", peg$c114 = peg$literalExpectation(\"<\", false), peg$c115 = \"*\", peg$c116 = peg$literalExpectation(\"*\", false), peg$c117 = \"/\", peg$c118 = peg$literalExpectation(\"/\", false), peg$c119 = \"%\", peg$c120 = peg$literalExpectation(\"%\", false), peg$c121 = \"while\", peg$c122 = peg$literalExpectation(\"while\", false), peg$c123 = \"for\", peg$c124 = peg$literalExpectation(\"for\", false), peg$c125 = \"if\", peg$c126 = peg$literalExpectation(\"if\", false), peg$c127 = \"break\", peg$c128 = peg$literalExpectation(\"break\", false), peg$c129 = \"continue\", peg$c130 = peg$literalExpectation(\"continue\", false), peg$c131 = \"return\", peg$c132 = peg$literalExpectation(\"return\", false), peg$c133 = \"true\", peg$c134 = peg$literalExpectation(\"true\", false), peg$c135 = \"false\", peg$c136 = peg$literalExpectation(\"false\", false), peg$c137 = \"null\", peg$c138 = peg$literalExpectation(\"null\", false), peg$c139 = /^[a-zA-Z]/, peg$c140 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false), peg$c141 = /^[a-zA-Z0-9]/, peg$c142 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false), peg$c143 = peg$otherExpectation(\"newline\"), peg$c144 = \"\\n\", peg$c145 = peg$literalExpectation(\"\\n\", false), peg$c146 = \"\\r\\n\", peg$c147 = peg$literalExpectation(\"\\r\\n\", false), peg$c148 = \"\\r\", peg$c149 = peg$literalExpectation(\"\\r\", false), peg$c150 = peg$otherExpectation(\"whitespace\"), peg$c151 = \"\\t\", peg$c152 = peg$literalExpectation(\"\\t\", false), peg$c153 = \" \", peg$c154 = peg$literalExpectation(\" \", false), peg$c155 = peg$otherExpectation(\"comment\"), peg$c156 = \"//\", peg$c157 = peg$literalExpectation(\"//\", false), peg$c158 = peg$anyExpectation(), peg$c159 = \"/*\", peg$c160 = peg$literalExpectation(\"/*\", false), peg$c161 = \"*/\", peg$c162 = peg$literalExpectation(\"*/\", false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;\r\n    if (\"startRule\" in options) {\r\n        if (!(options.startRule in peg$startRuleFunctions)) {\r\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n        }\r\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n    }\r\n    function text() {\r\n        return input.substring(peg$savedPos, peg$currPos);\r\n    }\r\n    function location() {\r\n        return peg$computeLocation(peg$savedPos, peg$currPos);\r\n    }\r\n    function expected(description, location) {\r\n        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\r\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\r\n    }\r\n    function error(message, location) {\r\n        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\r\n        throw peg$buildSimpleError(message, location);\r\n    }\r\n    function peg$literalExpectation(text, ignoreCase) {\r\n        return { type: \"literal\", text: text, ignoreCase: ignoreCase };\r\n    }\r\n    function peg$classExpectation(parts, inverted, ignoreCase) {\r\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n    }\r\n    function peg$anyExpectation() {\r\n        return { type: \"any\" };\r\n    }\r\n    function peg$endExpectation() {\r\n        return { type: \"end\" };\r\n    }\r\n    function peg$otherExpectation(description) {\r\n        return { type: \"other\", description: description };\r\n    }\r\n    function peg$computePosDetails(pos) {\r\n        var details = peg$posDetailsCache[pos], p;\r\n        if (details) {\r\n            return details;\r\n        }\r\n        else {\r\n            p = pos - 1;\r\n            while (!peg$posDetailsCache[p]) {\r\n                p--;\r\n            }\r\n            details = peg$posDetailsCache[p];\r\n            details = {\r\n                line: details.line,\r\n                column: details.column\r\n            };\r\n            while (p < pos) {\r\n                if (input.charCodeAt(p) === 10) {\r\n                    details.line++;\r\n                    details.column = 1;\r\n                }\r\n                else {\r\n                    details.column++;\r\n                }\r\n                p++;\r\n            }\r\n            peg$posDetailsCache[pos] = details;\r\n            return details;\r\n        }\r\n    }\r\n    function peg$computeLocation(startPos, endPos) {\r\n        var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);\r\n        return {\r\n            start: {\r\n                offset: startPos,\r\n                line: startPosDetails.line,\r\n                column: startPosDetails.column\r\n            },\r\n            end: {\r\n                offset: endPos,\r\n                line: endPosDetails.line,\r\n                column: endPosDetails.column\r\n            }\r\n        };\r\n    }\r\n    function peg$fail(expected) {\r\n        if (peg$currPos < peg$maxFailPos) {\r\n            return;\r\n        }\r\n        if (peg$currPos > peg$maxFailPos) {\r\n            peg$maxFailPos = peg$currPos;\r\n            peg$maxFailExpected = [];\r\n        }\r\n        peg$maxFailExpected.push(expected);\r\n    }\r\n    function peg$buildSimpleError(message, location) {\r\n        return new peg$SyntaxError(message, null, null, location);\r\n    }\r\n    function peg$buildStructuredError(expected, found, location) {\r\n        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\r\n    }\r\n    function peg$parseProgram() {\r\n        var s0, s1;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseBlock();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c0(s1);\r\n        }\r\n        s0 = s1;\r\n        return s0;\r\n    }\r\n    function peg$parseStatement() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$parseMemberAssignment();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parseAssignment();\r\n            if (s0 === peg$FAILED) {\r\n                s0 = peg$parseIfStatement();\r\n                if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseWhileStatement();\r\n                    if (s0 === peg$FAILED) {\r\n                        s0 = peg$parseForStatement();\r\n                        if (s0 === peg$FAILED) {\r\n                            s0 = peg$parseBreakStatement();\r\n                            if (s0 === peg$FAILED) {\r\n                                s0 = peg$parseContinueStatement();\r\n                                if (s0 === peg$FAILED) {\r\n                                    s0 = peg$parseReturnStatement();\r\n                                    if (s0 === peg$FAILED) {\r\n                                        s0 = peg$parseFunctionDeclaration();\r\n                                        if (s0 === peg$FAILED) {\r\n                                            s0 = peg$parseMemberOrCallChain();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c1);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseAssignment() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseIdentifier();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 61) {\r\n                    s3 = peg$c3;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c4);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parseExpression();\r\n                        if (s5 !== peg$FAILED) {\r\n                            peg$savedPos = s0;\r\n                            s1 = peg$c5(s1, s5);\r\n                            s0 = s1;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c2);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseMemberAssignment() {\r\n        var s0, s1, s2, s3, s4, s5, s6;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseMemberOrCallChain();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = peg$currPos;\r\n            s2 = peg$c7(s1);\r\n            if (s2) {\r\n                s2 = void 0;\r\n            }\r\n            else {\r\n                s2 = peg$FAILED;\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parse__();\r\n                if (s3 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 61) {\r\n                        s4 = peg$c3;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s4 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c4);\r\n                        }\r\n                    }\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parse__();\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parseExpression();\r\n                            if (s6 !== peg$FAILED) {\r\n                                peg$savedPos = s0;\r\n                                s1 = peg$c8(s1, s6);\r\n                                s0 = s1;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c6);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseFunctionDeclaration() {\r\n        var s0, s1, s2, s3;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseIdentifier();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parseFunctionExpression();\r\n                if (s3 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c10(s1, s3);\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c9);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseIfStatement() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseIfKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 40) {\r\n                    s3 = peg$c12;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c13);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parseExpression();\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parse__();\r\n                            if (s6 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 41) {\r\n                                    s7 = peg$c14;\r\n                                    peg$currPos++;\r\n                                }\r\n                                else {\r\n                                    s7 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) {\r\n                                        peg$fail(peg$c15);\r\n                                    }\r\n                                }\r\n                                if (s7 !== peg$FAILED) {\r\n                                    s8 = peg$parse__();\r\n                                    if (s8 !== peg$FAILED) {\r\n                                        s9 = peg$parseControlBody();\r\n                                        if (s9 !== peg$FAILED) {\r\n                                            peg$savedPos = s0;\r\n                                            s1 = peg$c16(s5, s9);\r\n                                            s0 = s1;\r\n                                        }\r\n                                        else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c11);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseWhileStatement() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseWhileKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 40) {\r\n                    s3 = peg$c12;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c13);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parseExpression();\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parse__();\r\n                            if (s6 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 41) {\r\n                                    s7 = peg$c14;\r\n                                    peg$currPos++;\r\n                                }\r\n                                else {\r\n                                    s7 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) {\r\n                                        peg$fail(peg$c15);\r\n                                    }\r\n                                }\r\n                                if (s7 !== peg$FAILED) {\r\n                                    s8 = peg$parse__();\r\n                                    if (s8 !== peg$FAILED) {\r\n                                        s9 = peg$parseControlBody();\r\n                                        if (s9 !== peg$FAILED) {\r\n                                            peg$savedPos = s0;\r\n                                            s1 = peg$c18(s5, s9);\r\n                                            s0 = s1;\r\n                                        }\r\n                                        else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c17);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseForStatement() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseForKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 40) {\r\n                    s3 = peg$c12;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c13);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parseStatement();\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parse__();\r\n                            if (s6 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 59) {\r\n                                    s7 = peg$c20;\r\n                                    peg$currPos++;\r\n                                }\r\n                                else {\r\n                                    s7 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) {\r\n                                        peg$fail(peg$c21);\r\n                                    }\r\n                                }\r\n                                if (s7 !== peg$FAILED) {\r\n                                    s8 = peg$parse__();\r\n                                    if (s8 !== peg$FAILED) {\r\n                                        s9 = peg$parseExpression();\r\n                                        if (s9 !== peg$FAILED) {\r\n                                            s10 = peg$parse__();\r\n                                            if (s10 !== peg$FAILED) {\r\n                                                if (input.charCodeAt(peg$currPos) === 59) {\r\n                                                    s11 = peg$c20;\r\n                                                    peg$currPos++;\r\n                                                }\r\n                                                else {\r\n                                                    s11 = peg$FAILED;\r\n                                                    if (peg$silentFails === 0) {\r\n                                                        peg$fail(peg$c21);\r\n                                                    }\r\n                                                }\r\n                                                if (s11 !== peg$FAILED) {\r\n                                                    s12 = peg$parse__();\r\n                                                    if (s12 !== peg$FAILED) {\r\n                                                        s13 = peg$parseStatement();\r\n                                                        if (s13 !== peg$FAILED) {\r\n                                                            s14 = peg$parse__();\r\n                                                            if (s14 !== peg$FAILED) {\r\n                                                                if (input.charCodeAt(peg$currPos) === 41) {\r\n                                                                    s15 = peg$c14;\r\n                                                                    peg$currPos++;\r\n                                                                }\r\n                                                                else {\r\n                                                                    s15 = peg$FAILED;\r\n                                                                    if (peg$silentFails === 0) {\r\n                                                                        peg$fail(peg$c15);\r\n                                                                    }\r\n                                                                }\r\n                                                                if (s15 !== peg$FAILED) {\r\n                                                                    s16 = peg$parse__();\r\n                                                                    if (s16 !== peg$FAILED) {\r\n                                                                        s17 = peg$parseControlBody();\r\n                                                                        if (s17 !== peg$FAILED) {\r\n                                                                            peg$savedPos = s0;\r\n                                                                            s1 = peg$c22(s5, s9, s13, s17);\r\n                                                                            s0 = s1;\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            peg$currPos = s0;\r\n                                                                            s0 = peg$FAILED;\r\n                                                                        }\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        peg$currPos = s0;\r\n                                                                        s0 = peg$FAILED;\r\n                                                                    }\r\n                                                                }\r\n                                                                else {\r\n                                                                    peg$currPos = s0;\r\n                                                                    s0 = peg$FAILED;\r\n                                                                }\r\n                                                            }\r\n                                                            else {\r\n                                                                peg$currPos = s0;\r\n                                                                s0 = peg$FAILED;\r\n                                                            }\r\n                                                        }\r\n                                                        else {\r\n                                                            peg$currPos = s0;\r\n                                                            s0 = peg$FAILED;\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        peg$currPos = s0;\r\n                                                        s0 = peg$FAILED;\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    peg$currPos = s0;\r\n                                                    s0 = peg$FAILED;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                peg$currPos = s0;\r\n                                                s0 = peg$FAILED;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c19);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseControlBody() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$parseStatement();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 123) {\r\n                s1 = peg$c23;\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c24);\r\n                }\r\n            }\r\n            if (s1 !== peg$FAILED) {\r\n                s2 = peg$parse__();\r\n                if (s2 !== peg$FAILED) {\r\n                    s3 = peg$parseBlock();\r\n                    if (s3 !== peg$FAILED) {\r\n                        s4 = peg$parse__();\r\n                        if (s4 !== peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 125) {\r\n                                s5 = peg$c25;\r\n                                peg$currPos++;\r\n                            }\r\n                            else {\r\n                                s5 = peg$FAILED;\r\n                                if (peg$silentFails === 0) {\r\n                                    peg$fail(peg$c26);\r\n                                }\r\n                            }\r\n                            if (s5 !== peg$FAILED) {\r\n                                peg$savedPos = s0;\r\n                                s1 = peg$c27(s3);\r\n                                s0 = s1;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseBreakStatement() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseBreakKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c29();\r\n        }\r\n        s0 = s1;\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c28);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseContinueStatement() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseContinueKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c31();\r\n        }\r\n        s0 = s1;\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c30);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseReturnStatement() {\r\n        var s0, s1, s2, s3;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseReturnKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parseExpression();\r\n                if (s3 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c33(s3);\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c32);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseBlock() {\r\n        var s0, s1, s2, s3, s4, s5, s6;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parse__();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parseStatement();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = [];\r\n                s4 = peg$currPos;\r\n                s5 = peg$parse__();\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parseStatement();\r\n                    if (s6 !== peg$FAILED) {\r\n                        peg$savedPos = s4;\r\n                        s5 = peg$c34(s2, s6);\r\n                        s4 = s5;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                }\r\n                while (s4 !== peg$FAILED) {\r\n                    s3.push(s4);\r\n                    s4 = peg$currPos;\r\n                    s5 = peg$parse__();\r\n                    if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parseStatement();\r\n                        if (s6 !== peg$FAILED) {\r\n                            peg$savedPos = s4;\r\n                            s5 = peg$c34(s2, s6);\r\n                            s4 = s5;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c35(s2, s3);\r\n                        s0 = s1;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parse__();\r\n            if (s1 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c36();\r\n            }\r\n            s0 = s1;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseExpression() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$parseBinaryOperationTree();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parseTerm();\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c37);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseBinaryOperationTree() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseTerm();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = [];\r\n                s4 = peg$currPos;\r\n                s5 = peg$parseBinaryOperator();\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parse__();\r\n                    if (s6 !== peg$FAILED) {\r\n                        s7 = peg$parseTerm();\r\n                        if (s7 !== peg$FAILED) {\r\n                            s8 = peg$parse__();\r\n                            if (s8 !== peg$FAILED) {\r\n                                peg$savedPos = s4;\r\n                                s5 = peg$c39(s1, s5, s7);\r\n                                s4 = s5;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s4;\r\n                                s4 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                    while (s4 !== peg$FAILED) {\r\n                        s3.push(s4);\r\n                        s4 = peg$currPos;\r\n                        s5 = peg$parseBinaryOperator();\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parse__();\r\n                            if (s6 !== peg$FAILED) {\r\n                                s7 = peg$parseTerm();\r\n                                if (s7 !== peg$FAILED) {\r\n                                    s8 = peg$parse__();\r\n                                    if (s8 !== peg$FAILED) {\r\n                                        peg$savedPos = s4;\r\n                                        s5 = peg$c39(s1, s5, s7);\r\n                                        s4 = s5;\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s4;\r\n                                        s4 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s4;\r\n                                    s4 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s4;\r\n                                s4 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c40(s1, s3);\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c38);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseTerm() {\r\n        var s0;\r\n        s0 = peg$parseMemberOrCallChain();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parsePrimaryTerm();\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseMemberOrCallChain() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parsePrimaryTerm();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n                s5 = peg$parseCallOperator();\r\n                if (s5 === peg$FAILED) {\r\n                    s5 = peg$parseMemberOperator();\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    peg$savedPos = s3;\r\n                    s4 = peg$c41(s1, s5);\r\n                    s3 = s4;\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n                while (s3 !== peg$FAILED) {\r\n                    s2.push(s3);\r\n                    s3 = peg$currPos;\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        s5 = peg$parseCallOperator();\r\n                        if (s5 === peg$FAILED) {\r\n                            s5 = peg$parseMemberOperator();\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                            peg$savedPos = s3;\r\n                            s4 = peg$c41(s1, s5);\r\n                            s3 = s4;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                s2 = peg$FAILED;\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c42(s1, s2);\r\n                s0 = s1;\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseCallOperator() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n            s1 = peg$c12;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c13);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parseArguments();\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 41) {\r\n                            s5 = peg$c14;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s5 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c15);\r\n                            }\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                            peg$savedPos = s0;\r\n                            s1 = peg$c44(s3);\r\n                            s0 = s1;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c43);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseArguments() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseExpression();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 44) {\r\n                    s5 = peg$c46;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c47);\r\n                    }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parse__();\r\n                    if (s6 !== peg$FAILED) {\r\n                        s7 = peg$parseExpression();\r\n                        if (s7 !== peg$FAILED) {\r\n                            peg$savedPos = s3;\r\n                            s4 = peg$c48(s1, s7);\r\n                            s3 = s4;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                s4 = peg$parse__();\r\n                if (s4 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 44) {\r\n                        s5 = peg$c46;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c47);\r\n                        }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parse__();\r\n                        if (s6 !== peg$FAILED) {\r\n                            s7 = peg$parseExpression();\r\n                            if (s7 !== peg$FAILED) {\r\n                                peg$savedPos = s3;\r\n                                s4 = peg$c48(s1, s7);\r\n                                s3 = s4;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s3;\r\n                                s3 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c49(s1, s2);\r\n                s0 = s1;\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parse__();\r\n            if (s1 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c50();\r\n            }\r\n            s0 = s1;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c45);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseMemberOperator() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 91) {\r\n            s1 = peg$c52;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c53);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parseExpression();\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 93) {\r\n                            s5 = peg$c54;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s5 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c55);\r\n                            }\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                            peg$savedPos = s0;\r\n                            s1 = peg$c56(s3);\r\n                            s0 = s1;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n                s1 = peg$c57;\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c58);\r\n                }\r\n            }\r\n            if (s1 !== peg$FAILED) {\r\n                s2 = peg$parsePropertyLiteral();\r\n                if (s2 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c56(s2);\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c51);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parsePrimaryTerm() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$parseLiteral();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parseIdentifier();\r\n            if (s0 === peg$FAILED) {\r\n                s0 = peg$parseFunctionExpression();\r\n                if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseObjectLiteral();\r\n                    if (s0 === peg$FAILED) {\r\n                        s0 = peg$currPos;\r\n                        if (input.charCodeAt(peg$currPos) === 40) {\r\n                            s1 = peg$c12;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s1 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c13);\r\n                            }\r\n                        }\r\n                        if (s1 !== peg$FAILED) {\r\n                            s2 = peg$parse__();\r\n                            if (s2 !== peg$FAILED) {\r\n                                s3 = peg$parseExpression();\r\n                                if (s3 !== peg$FAILED) {\r\n                                    s4 = peg$parse__();\r\n                                    if (s4 !== peg$FAILED) {\r\n                                        if (input.charCodeAt(peg$currPos) === 41) {\r\n                                            s5 = peg$c14;\r\n                                            peg$currPos++;\r\n                                        }\r\n                                        else {\r\n                                            s5 = peg$FAILED;\r\n                                            if (peg$silentFails === 0) {\r\n                                                peg$fail(peg$c15);\r\n                                            }\r\n                                        }\r\n                                        if (s5 !== peg$FAILED) {\r\n                                            peg$savedPos = s0;\r\n                                            s1 = peg$c59(s3);\r\n                                            s0 = s1;\r\n                                        }\r\n                                        else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseFunctionExpression() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n            s1 = peg$c12;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c13);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parseArgumentsDeclaration();\r\n                if (s3 === peg$FAILED) {\r\n                    s3 = null;\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 41) {\r\n                            s5 = peg$c14;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s5 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c15);\r\n                            }\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parse__();\r\n                            if (s6 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 123) {\r\n                                    s7 = peg$c23;\r\n                                    peg$currPos++;\r\n                                }\r\n                                else {\r\n                                    s7 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) {\r\n                                        peg$fail(peg$c24);\r\n                                    }\r\n                                }\r\n                                if (s7 !== peg$FAILED) {\r\n                                    s8 = peg$parse__();\r\n                                    if (s8 !== peg$FAILED) {\r\n                                        s9 = peg$parseBlock();\r\n                                        if (s9 !== peg$FAILED) {\r\n                                            s10 = peg$parse__();\r\n                                            if (s10 !== peg$FAILED) {\r\n                                                if (input.charCodeAt(peg$currPos) === 125) {\r\n                                                    s11 = peg$c25;\r\n                                                    peg$currPos++;\r\n                                                }\r\n                                                else {\r\n                                                    s11 = peg$FAILED;\r\n                                                    if (peg$silentFails === 0) {\r\n                                                        peg$fail(peg$c26);\r\n                                                    }\r\n                                                }\r\n                                                if (s11 !== peg$FAILED) {\r\n                                                    peg$savedPos = s0;\r\n                                                    s1 = peg$c61(s3, s9);\r\n                                                    s0 = s1;\r\n                                                }\r\n                                                else {\r\n                                                    peg$currPos = s0;\r\n                                                    s0 = peg$FAILED;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                peg$currPos = s0;\r\n                                                s0 = peg$FAILED;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c60);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseArgumentsDeclaration() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseExpression();\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 44) {\r\n                    s5 = peg$c46;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c47);\r\n                    }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parse__();\r\n                    if (s6 !== peg$FAILED) {\r\n                        s7 = peg$parseIdentifier();\r\n                        if (s7 !== peg$FAILED) {\r\n                            peg$savedPos = s3;\r\n                            s4 = peg$c48(s1, s7);\r\n                            s3 = s4;\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                s4 = peg$parse__();\r\n                if (s4 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 44) {\r\n                        s5 = peg$c46;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c47);\r\n                        }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parse__();\r\n                        if (s6 !== peg$FAILED) {\r\n                            s7 = peg$parseIdentifier();\r\n                            if (s7 !== peg$FAILED) {\r\n                                peg$savedPos = s3;\r\n                                s4 = peg$c48(s1, s7);\r\n                                s3 = s4;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s3;\r\n                                s3 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c63(s1, s2);\r\n                s0 = s1;\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c62);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseObjectLiteral() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 123) {\r\n            s1 = peg$c23;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c24);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n                s5 = peg$parseLiteral();\r\n                if (s5 === peg$FAILED) {\r\n                    s5 = peg$parsePropertyLiteral();\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parse__();\r\n                    if (s6 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 58) {\r\n                            s7 = peg$c65;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s7 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c66);\r\n                            }\r\n                        }\r\n                        if (s7 !== peg$FAILED) {\r\n                            s8 = peg$parse__();\r\n                            if (s8 !== peg$FAILED) {\r\n                                s9 = peg$parseExpression();\r\n                                if (s9 !== peg$FAILED) {\r\n                                    peg$savedPos = s3;\r\n                                    s4 = peg$c67(s5, s9);\r\n                                    s3 = s4;\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s3;\r\n                                    s3 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s3;\r\n                                s3 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                s4 = peg$parse__();\r\n                if (s4 !== peg$FAILED) {\r\n                    s5 = peg$parseLiteral();\r\n                    if (s5 === peg$FAILED) {\r\n                        s5 = peg$parsePropertyLiteral();\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parse__();\r\n                        if (s6 !== peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 58) {\r\n                                s7 = peg$c65;\r\n                                peg$currPos++;\r\n                            }\r\n                            else {\r\n                                s7 = peg$FAILED;\r\n                                if (peg$silentFails === 0) {\r\n                                    peg$fail(peg$c66);\r\n                                }\r\n                            }\r\n                            if (s7 !== peg$FAILED) {\r\n                                s8 = peg$parse__();\r\n                                if (s8 !== peg$FAILED) {\r\n                                    s9 = peg$parseExpression();\r\n                                    if (s9 !== peg$FAILED) {\r\n                                        peg$savedPos = s3;\r\n                                        s4 = peg$c67(s5, s9);\r\n                                        s3 = s4;\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s3;\r\n                                        s3 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s3;\r\n                                    s3 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s3;\r\n                                s3 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s3;\r\n                            s3 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parse__();\r\n                if (s3 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 125) {\r\n                        s4 = peg$c25;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s4 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c26);\r\n                        }\r\n                    }\r\n                    if (s4 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c68(s2);\r\n                        s0 = s1;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c64);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parsePropertyLiteral() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseIdentifier();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c70(s1);\r\n        }\r\n        s0 = s1;\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c69);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseLiteral() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseFloat();\r\n        if (s1 === peg$FAILED) {\r\n            s1 = peg$parseInteger();\r\n            if (s1 === peg$FAILED) {\r\n                s1 = peg$parseBoolean();\r\n                if (s1 === peg$FAILED) {\r\n                    s1 = peg$parseString();\r\n                }\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c72(s1);\r\n        }\r\n        s0 = s1;\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c71);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseFloat() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        s2 = peg$currPos;\r\n        s3 = peg$parseInteger();\r\n        if (s3 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n                s4 = peg$c57;\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s4 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c58);\r\n                }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n                s5 = peg$parsePositiveInteger();\r\n                if (s5 !== peg$FAILED) {\r\n                    s6 = peg$currPos;\r\n                    if (input.charCodeAt(peg$currPos) === 69) {\r\n                        s7 = peg$c73;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s7 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c74);\r\n                        }\r\n                    }\r\n                    if (s7 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 43) {\r\n                            s8 = peg$c75;\r\n                            peg$currPos++;\r\n                        }\r\n                        else {\r\n                            s8 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c76);\r\n                            }\r\n                        }\r\n                        if (s8 === peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 45) {\r\n                                s8 = peg$c77;\r\n                                peg$currPos++;\r\n                            }\r\n                            else {\r\n                                s8 = peg$FAILED;\r\n                                if (peg$silentFails === 0) {\r\n                                    peg$fail(peg$c78);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (s8 !== peg$FAILED) {\r\n                            s9 = peg$parseInteger();\r\n                            if (s9 !== peg$FAILED) {\r\n                                s7 = [s7, s8, s9];\r\n                                s6 = s7;\r\n                            }\r\n                            else {\r\n                                peg$currPos = s6;\r\n                                s6 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s6;\r\n                            s6 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s6;\r\n                        s6 = peg$FAILED;\r\n                    }\r\n                    if (s6 === peg$FAILED) {\r\n                        s6 = null;\r\n                    }\r\n                    if (s6 !== peg$FAILED) {\r\n                        s3 = [s3, s4, s5, s6];\r\n                        s2 = s3;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s2;\r\n                        s2 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s2;\r\n                    s2 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n            s1 = input.substring(s1, peg$currPos);\r\n        }\r\n        else {\r\n            s1 = s2;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c79(s1);\r\n        }\r\n        s0 = s1;\r\n        return s0;\r\n    }\r\n    function peg$parsePositiveInteger() {\r\n        var s0, s1, s2, s3;\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        s2 = [];\r\n        if (peg$c80.test(input.charAt(peg$currPos))) {\r\n            s3 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c81);\r\n            }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                if (peg$c80.test(input.charAt(peg$currPos))) {\r\n                    s3 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c81);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n            s1 = input.substring(s1, peg$currPos);\r\n        }\r\n        else {\r\n            s1 = s2;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c82(s1);\r\n        }\r\n        s0 = s1;\r\n        return s0;\r\n    }\r\n    function peg$parseInteger() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 45) {\r\n            s4 = peg$c77;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c78);\r\n            }\r\n        }\r\n        if (s4 === peg$FAILED) {\r\n            s4 = null;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n            if (peg$c80.test(input.charAt(peg$currPos))) {\r\n                s5 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c81);\r\n                }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                if (input.charCodeAt(peg$currPos) === 45) {\r\n                    s4 = peg$c77;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s4 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c78);\r\n                    }\r\n                }\r\n                if (s4 === peg$FAILED) {\r\n                    s4 = null;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                    if (peg$c80.test(input.charAt(peg$currPos))) {\r\n                        s5 = input.charAt(peg$currPos);\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c81);\r\n                        }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s4 = [s4, s5];\r\n                        s3 = s4;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n            s1 = input.substring(s1, peg$currPos);\r\n        }\r\n        else {\r\n            s1 = s2;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c82(s1);\r\n        }\r\n        s0 = s1;\r\n        return s0;\r\n    }\r\n    function peg$parseBoolean() {\r\n        var s0, s1;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseTrueKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c83();\r\n        }\r\n        s0 = s1;\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parseFalseKeyword();\r\n            if (s1 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c84();\r\n            }\r\n            s0 = s1;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseNull() {\r\n        var s0, s1;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseNullKeyword();\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c85();\r\n        }\r\n        s0 = s1;\r\n        return s0;\r\n    }\r\n    function peg$parseString() {\r\n        var s0, s1, s2, s3;\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 34) {\r\n            s1 = peg$c86;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c87);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$parseDoubleStringChar();\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$parseDoubleStringChar();\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 34) {\r\n                    s3 = peg$c86;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c87);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c88();\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseDoubleStringChar() {\r\n        var s0, s1, s2, s3, s4, s5, s6, s7;\r\n        if (peg$c89.test(input.charAt(peg$currPos))) {\r\n            s0 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c90);\r\n            }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 92) {\r\n                s1 = peg$c91;\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c92);\r\n                }\r\n            }\r\n            if (s1 !== peg$FAILED) {\r\n                if (peg$c93.test(input.charAt(peg$currPos))) {\r\n                    s2 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s2 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c94);\r\n                    }\r\n                }\r\n                if (s2 === peg$FAILED) {\r\n                    s2 = peg$currPos;\r\n                    if (input.charCodeAt(peg$currPos) === 117) {\r\n                        s3 = peg$c95;\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s3 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c96);\r\n                        }\r\n                    }\r\n                    if (s3 !== peg$FAILED) {\r\n                        s4 = peg$parseHexDigit();\r\n                        if (s4 !== peg$FAILED) {\r\n                            s5 = peg$parseHexDigit();\r\n                            if (s5 !== peg$FAILED) {\r\n                                s6 = peg$parseHexDigit();\r\n                                if (s6 !== peg$FAILED) {\r\n                                    s7 = peg$parseHexDigit();\r\n                                    if (s7 !== peg$FAILED) {\r\n                                        s3 = [s3, s4, s5, s6, s7];\r\n                                        s2 = s3;\r\n                                    }\r\n                                    else {\r\n                                        peg$currPos = s2;\r\n                                        s2 = peg$FAILED;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    peg$currPos = s2;\r\n                                    s2 = peg$FAILED;\r\n                                }\r\n                            }\r\n                            else {\r\n                                peg$currPos = s2;\r\n                                s2 = peg$FAILED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            peg$currPos = s2;\r\n                            s2 = peg$FAILED;\r\n                        }\r\n                    }\r\n                    else {\r\n                        peg$currPos = s2;\r\n                        s2 = peg$FAILED;\r\n                    }\r\n                }\r\n                if (s2 !== peg$FAILED) {\r\n                    s1 = [s1, s2];\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseHexDigit() {\r\n        var s0;\r\n        if (peg$c97.test(input.charAt(peg$currPos))) {\r\n            s0 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c98);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseIdentifier() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        peg$silentFails++;\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        s2 = peg$currPos;\r\n        s3 = peg$parseIdentifierStart();\r\n        if (s3 !== peg$FAILED) {\r\n            s4 = [];\r\n            s5 = peg$parseIdentifierPart();\r\n            while (s5 !== peg$FAILED) {\r\n                s4.push(s5);\r\n                s5 = peg$parseIdentifierPart();\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n                s3 = [s3, s4];\r\n                s2 = s3;\r\n            }\r\n            else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n            s1 = input.substring(s1, peg$currPos);\r\n        }\r\n        else {\r\n            s1 = s2;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c100(s1);\r\n        }\r\n        s0 = s1;\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c99);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseBinaryOperator() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 2) === peg$c101) {\r\n            s0 = peg$c101;\r\n            peg$currPos += 2;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c102);\r\n            }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c103) {\r\n                s0 = peg$c103;\r\n                peg$currPos += 2;\r\n            }\r\n            else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c104);\r\n                }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n                if (input.substr(peg$currPos, 2) === peg$c105) {\r\n                    s0 = peg$c105;\r\n                    peg$currPos += 2;\r\n                }\r\n                else {\r\n                    s0 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c106);\r\n                    }\r\n                }\r\n                if (s0 === peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 2) === peg$c107) {\r\n                        s0 = peg$c107;\r\n                        peg$currPos += 2;\r\n                    }\r\n                    else {\r\n                        s0 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c108);\r\n                        }\r\n                    }\r\n                    if (s0 === peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 2) === peg$c109) {\r\n                            s0 = peg$c109;\r\n                            peg$currPos += 2;\r\n                        }\r\n                        else {\r\n                            s0 = peg$FAILED;\r\n                            if (peg$silentFails === 0) {\r\n                                peg$fail(peg$c110);\r\n                            }\r\n                        }\r\n                        if (s0 === peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 62) {\r\n                                s0 = peg$c111;\r\n                                peg$currPos++;\r\n                            }\r\n                            else {\r\n                                s0 = peg$FAILED;\r\n                                if (peg$silentFails === 0) {\r\n                                    peg$fail(peg$c112);\r\n                                }\r\n                            }\r\n                            if (s0 === peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 60) {\r\n                                    s0 = peg$c113;\r\n                                    peg$currPos++;\r\n                                }\r\n                                else {\r\n                                    s0 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) {\r\n                                        peg$fail(peg$c114);\r\n                                    }\r\n                                }\r\n                                if (s0 === peg$FAILED) {\r\n                                    if (input.charCodeAt(peg$currPos) === 43) {\r\n                                        s0 = peg$c75;\r\n                                        peg$currPos++;\r\n                                    }\r\n                                    else {\r\n                                        s0 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) {\r\n                                            peg$fail(peg$c76);\r\n                                        }\r\n                                    }\r\n                                    if (s0 === peg$FAILED) {\r\n                                        if (input.charCodeAt(peg$currPos) === 45) {\r\n                                            s0 = peg$c77;\r\n                                            peg$currPos++;\r\n                                        }\r\n                                        else {\r\n                                            s0 = peg$FAILED;\r\n                                            if (peg$silentFails === 0) {\r\n                                                peg$fail(peg$c78);\r\n                                            }\r\n                                        }\r\n                                        if (s0 === peg$FAILED) {\r\n                                            if (input.charCodeAt(peg$currPos) === 42) {\r\n                                                s0 = peg$c115;\r\n                                                peg$currPos++;\r\n                                            }\r\n                                            else {\r\n                                                s0 = peg$FAILED;\r\n                                                if (peg$silentFails === 0) {\r\n                                                    peg$fail(peg$c116);\r\n                                                }\r\n                                            }\r\n                                            if (s0 === peg$FAILED) {\r\n                                                if (input.charCodeAt(peg$currPos) === 47) {\r\n                                                    s0 = peg$c117;\r\n                                                    peg$currPos++;\r\n                                                }\r\n                                                else {\r\n                                                    s0 = peg$FAILED;\r\n                                                    if (peg$silentFails === 0) {\r\n                                                        peg$fail(peg$c118);\r\n                                                    }\r\n                                                }\r\n                                                if (s0 === peg$FAILED) {\r\n                                                    if (input.charCodeAt(peg$currPos) === 37) {\r\n                                                        s0 = peg$c119;\r\n                                                        peg$currPos++;\r\n                                                    }\r\n                                                    else {\r\n                                                        s0 = peg$FAILED;\r\n                                                        if (peg$silentFails === 0) {\r\n                                                            peg$fail(peg$c120);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseWhileKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 5) === peg$c121) {\r\n            s0 = peg$c121;\r\n            peg$currPos += 5;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c122);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseForKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 3) === peg$c123) {\r\n            s0 = peg$c123;\r\n            peg$currPos += 3;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c124);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseIfKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 2) === peg$c125) {\r\n            s0 = peg$c125;\r\n            peg$currPos += 2;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c126);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseBreakKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 5) === peg$c127) {\r\n            s0 = peg$c127;\r\n            peg$currPos += 5;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c128);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseContinueKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 8) === peg$c129) {\r\n            s0 = peg$c129;\r\n            peg$currPos += 8;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c130);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseReturnKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 6) === peg$c131) {\r\n            s0 = peg$c131;\r\n            peg$currPos += 6;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c132);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseTrueKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 4) === peg$c133) {\r\n            s0 = peg$c133;\r\n            peg$currPos += 4;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c134);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseFalseKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 5) === peg$c135) {\r\n            s0 = peg$c135;\r\n            peg$currPos += 5;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c136);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseNullKeyword() {\r\n        var s0;\r\n        if (input.substr(peg$currPos, 4) === peg$c137) {\r\n            s0 = peg$c137;\r\n            peg$currPos += 4;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c138);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseKeyword() {\r\n        var s0;\r\n        s0 = peg$parseWhileKeyword();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parseForKeyword();\r\n            if (s0 === peg$FAILED) {\r\n                s0 = peg$parseIfKeyword();\r\n                if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseBreakKeyword();\r\n                    if (s0 === peg$FAILED) {\r\n                        s0 = peg$parseContinueKeyword();\r\n                        if (s0 === peg$FAILED) {\r\n                            s0 = peg$parseReturnKeyword();\r\n                            if (s0 === peg$FAILED) {\r\n                                s0 = peg$parseTrueKeyword();\r\n                                if (s0 === peg$FAILED) {\r\n                                    s0 = peg$parseFalseKeyword();\r\n                                    if (s0 === peg$FAILED) {\r\n                                        s0 = peg$parseNullKeyword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseIdentifierStart() {\r\n        var s0;\r\n        if (peg$c139.test(input.charAt(peg$currPos))) {\r\n            s0 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c140);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseIdentifierPart() {\r\n        var s0;\r\n        if (peg$c141.test(input.charAt(peg$currPos))) {\r\n            s0 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c142);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseNewline() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        if (input.charCodeAt(peg$currPos) === 10) {\r\n            s0 = peg$c144;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c145);\r\n            }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c146) {\r\n                s0 = peg$c146;\r\n                peg$currPos += 2;\r\n            }\r\n            else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c147);\r\n                }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 13) {\r\n                    s0 = peg$c148;\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s0 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c149);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c143);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseWhiteSpace() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        if (input.charCodeAt(peg$currPos) === 9) {\r\n            s0 = peg$c151;\r\n            peg$currPos++;\r\n        }\r\n        else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c152);\r\n            }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 32) {\r\n                s0 = peg$c153;\r\n                peg$currPos++;\r\n            }\r\n            else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c154);\r\n                }\r\n            }\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c150);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseComment() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = peg$parseLineComment();\r\n        if (s0 === peg$FAILED) {\r\n            s0 = peg$parseMultiLineComment();\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c155);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseLineComment() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$currPos;\r\n        if (input.substr(peg$currPos, 2) === peg$c156) {\r\n            s1 = peg$c156;\r\n            peg$currPos += 2;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c157);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            s5 = peg$parseNewline();\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n                s4 = void 0;\r\n            }\r\n            else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n                if (input.length > peg$currPos) {\r\n                    s5 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c158);\r\n                    }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    s4 = [s4, s5];\r\n                    s3 = s4;\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                s4 = peg$currPos;\r\n                peg$silentFails++;\r\n                s5 = peg$parseNewline();\r\n                peg$silentFails--;\r\n                if (s5 === peg$FAILED) {\r\n                    s4 = void 0;\r\n                }\r\n                else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                    if (input.length > peg$currPos) {\r\n                        s5 = input.charAt(peg$currPos);\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c158);\r\n                        }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s4 = [s4, s5];\r\n                        s3 = s4;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                s1 = [s1, s2];\r\n                s0 = s1;\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseMultiLineComment() {\r\n        var s0, s1, s2, s3, s4, s5;\r\n        s0 = peg$currPos;\r\n        if (input.substr(peg$currPos, 2) === peg$c159) {\r\n            s1 = peg$c159;\r\n            peg$currPos += 2;\r\n        }\r\n        else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c160);\r\n            }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$currPos;\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            if (input.substr(peg$currPos, 2) === peg$c161) {\r\n                s5 = peg$c161;\r\n                peg$currPos += 2;\r\n            }\r\n            else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) {\r\n                    peg$fail(peg$c162);\r\n                }\r\n            }\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n                s4 = void 0;\r\n            }\r\n            else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n                if (input.length > peg$currPos) {\r\n                    s5 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                }\r\n                else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c158);\r\n                    }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                    s4 = [s4, s5];\r\n                    s3 = s4;\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n            }\r\n            while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$currPos;\r\n                s4 = peg$currPos;\r\n                peg$silentFails++;\r\n                if (input.substr(peg$currPos, 2) === peg$c161) {\r\n                    s5 = peg$c161;\r\n                    peg$currPos += 2;\r\n                }\r\n                else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c162);\r\n                    }\r\n                }\r\n                peg$silentFails--;\r\n                if (s5 === peg$FAILED) {\r\n                    s4 = void 0;\r\n                }\r\n                else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                    if (input.length > peg$currPos) {\r\n                        s5 = input.charAt(peg$currPos);\r\n                        peg$currPos++;\r\n                    }\r\n                    else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$c158);\r\n                        }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                        s4 = [s4, s5];\r\n                        s3 = s4;\r\n                    }\r\n                    else {\r\n                        peg$currPos = s3;\r\n                        s3 = peg$FAILED;\r\n                    }\r\n                }\r\n                else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n                if (input.substr(peg$currPos, 2) === peg$c161) {\r\n                    s3 = peg$c161;\r\n                    peg$currPos += 2;\r\n                }\r\n                else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) {\r\n                        peg$fail(peg$c162);\r\n                    }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                    s1 = [s1, s2, s3];\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parse__() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = [];\r\n        s1 = peg$parseWhiteSpace();\r\n        if (s1 === peg$FAILED) {\r\n            s1 = peg$parseNewline();\r\n            if (s1 === peg$FAILED) {\r\n                s1 = peg$parseComment();\r\n            }\r\n        }\r\n        while (s1 !== peg$FAILED) {\r\n            s0.push(s1);\r\n            s1 = peg$parseWhiteSpace();\r\n            if (s1 === peg$FAILED) {\r\n                s1 = peg$parseNewline();\r\n                if (s1 === peg$FAILED) {\r\n                    s1 = peg$parseComment();\r\n                }\r\n            }\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c150);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parse_() {\r\n        var s0, s1;\r\n        peg$silentFails++;\r\n        s0 = [];\r\n        s1 = peg$parseWhiteSpace();\r\n        while (s1 !== peg$FAILED) {\r\n            s0.push(s1);\r\n            s1 = peg$parseWhiteSpace();\r\n        }\r\n        peg$silentFails--;\r\n        if (s0 === peg$FAILED) {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) {\r\n                peg$fail(peg$c150);\r\n            }\r\n        }\r\n        return s0;\r\n    }\r\n    function peg$parseEOL() {\r\n        var s0, s1, s2, s3;\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseLineComment();\r\n        if (s1 === peg$FAILED) {\r\n            s1 = null;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n            s2 = peg$parseNewline();\r\n            if (s2 !== peg$FAILED) {\r\n                s3 = peg$parse__();\r\n                if (s3 !== peg$FAILED) {\r\n                    s1 = [s1, s2, s3];\r\n                    s0 = s1;\r\n                }\r\n                else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                }\r\n            }\r\n            else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n            }\r\n        }\r\n        else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n        }\r\n        return s0;\r\n    }\r\n    const { orderOperations, buildMemberCallExpression } = require(\"./index.js\");\r\n    function node(type, properties, addLocation = true) {\r\n        if (addLocation)\r\n            properties.location = location();\r\n        return Object.assign({ type }, properties);\r\n    }\r\n    peg$result = peg$startRuleFunction();\r\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n        return peg$result;\r\n    }\r\n    else {\r\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n            peg$fail(peg$endExpectation());\r\n        }\r\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\r\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\r\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\r\n    }\r\n}\r\nmodule.exports = {\r\n    SyntaxError: peg$SyntaxError,\r\n    parse: peg$parse\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.orderOperations = exports.buildMemberCallExpression = void 0;\r\nconst operators_1 = require(\"../../operators\");\r\nfunction node(type, properties) { return Object.assign({ type }, properties); }\r\nconst typeToProperty = { CallExpression: \"callee\", MemberExpression: \"object\" };\r\nfunction buildMemberCallExpression(chain) {\r\n    return chain.tail.reduce((left, right) => {\r\n        right[typeToProperty[right.type]] = left;\r\n        return right;\r\n    }, chain.head);\r\n}\r\nexports.buildMemberCallExpression = buildMemberCallExpression;\r\nfunction orderOperations(operationChain) {\r\n    const nodeType = \"BinaryOperation\";\r\n    let operands = [operationChain.head];\r\n    let operators = [];\r\n    for (let { operand, operator } of operationChain.tail) {\r\n        operands.push(operand);\r\n        operators.push(operator);\r\n    }\r\n    let operandIndex = 0;\r\n    function parse(ops) {\r\n        if (ops.length == 0)\r\n            return operands[operandIndex++];\r\n        let operation, left, right;\r\n        if (ops.length == 1) {\r\n            left = operands[operandIndex++];\r\n            right = operands[operandIndex++];\r\n            operation = ops[0];\r\n        }\r\n        else {\r\n            // Find first of operators with highest precedence.\r\n            operation = ops.reduce((a, b) => operators_1.operatorPrecedences[a] < operators_1.operatorPrecedences[b] ? a : b);\r\n            let index = ops.indexOf(operation);\r\n            left = parse(ops.slice(0, index));\r\n            right = parse(ops.slice(index + 1, ops.length));\r\n        }\r\n        return node(nodeType, { operation, left, right });\r\n    }\r\n    return parse(operators);\r\n}\r\nexports.orderOperations = orderOperations;\r\nfunction buildPrecedenceTable(groups) {\r\n    let result = {};\r\n    for (let p = 0; p < groups.length; p++)\r\n        for (let operator of groups[p])\r\n            result[operator] = p;\r\n    return result;\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst traverse_1 = require(\"./traverse\");\r\nfunction postprocess(ast) {\r\n    ast = moveFunctionsToTop(ast);\r\n    ast = computeMissingLocations(ast);\r\n    return ast;\r\n}\r\nexports.default = postprocess;\r\nfunction moveFunctionsToTop(ast) {\r\n    traverse_1.traverse(ast, {\r\n        leave: node => {\r\n            if (node.type != \"Block\")\r\n                return;\r\n            let declarations = [];\r\n            let body = [];\r\n            for (let stmt of node.body) {\r\n                if (stmt.type == \"FunctionDeclaration\")\r\n                    declarations.push(stmt);\r\n                else\r\n                    body.push(stmt);\r\n            }\r\n            node.body = declarations.concat(body);\r\n        }\r\n    });\r\n    return ast;\r\n}\r\nfunction computeMissingLocations(ast) {\r\n    traverse_1.traverse(ast, {\r\n        leave: node => {\r\n            if (node.location)\r\n                return;\r\n            let locations = [];\r\n            traverse_1.forChildren(node, child => {\r\n                if (child.location) {\r\n                    locations.push(child.location.start);\r\n                    locations.push(child.location.end);\r\n                }\r\n            });\r\n            if (locations.length == 0)\r\n                return; //console.log( \"no child locations!!!\" )\r\n            let start = locations.reduce((a, b) => b.offset < a.offset ? b : a);\r\n            let end = locations.reduce((a, b) => b.offset > a.offset ? b : a);\r\n            node.location = { start, end };\r\n        }\r\n    });\r\n    return ast;\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.forChildren = exports.traverse = void 0;\r\nconst isValueType = value => typeof value != \"object\" || value == null;\r\nfunction traverse(object, visitor) {\r\n    let { enter, leave, filter } = visitor;\r\n    function internal(value) {\r\n        if (isValueType(value))\r\n            return;\r\n        if (value.type && filter && !filter(value))\r\n            return;\r\n        if (value.type && enter)\r\n            if (enter(value) == traverse.stop)\r\n                return;\r\n        for (let key in value)\r\n            internal(value[key]);\r\n        if (value.type && leave)\r\n            leave(value) || value;\r\n    }\r\n    internal(object);\r\n}\r\nexports.traverse = traverse;\r\ntraverse.stop = Symbol(\"stop\");\r\nfunction forChildren(object, callback) {\r\n    function internal(value) {\r\n        if (isValueType(value))\r\n            return;\r\n        if (value.type)\r\n            callback(value);\r\n        else\r\n            for (let key in value)\r\n                internal(value[key]);\r\n    }\r\n    for (let key in object)\r\n        internal(object[key]);\r\n}\r\nexports.forChildren = forChildren;\r\n",null,null,null,null,null,null,"\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector2_1 = __importDefault(require(\"./Vector2\"));\r\nconst epsilon = 0.000001;\r\nclass Matrix3 {\r\n    constructor(m11, m12, m13, m21, m22, m23, m31, m32, m33) {\r\n        this.m11 = 0;\r\n        this.m12 = 0;\r\n        this.m13 = 0;\r\n        this.m21 = 0;\r\n        this.m22 = 0;\r\n        this.m23 = 0;\r\n        this.m31 = 0;\r\n        this.m32 = 0;\r\n        this.m33 = 0;\r\n        this.m11 = m11;\r\n        this.m12 = m12;\r\n        this.m13 = m13;\r\n        this.m21 = m21;\r\n        this.m22 = m22;\r\n        this.m23 = m23;\r\n        this.m31 = m31;\r\n        this.m32 = m32;\r\n        this.m33 = m33;\r\n    }\r\n    multiply(other) { return multiplyMatrix(this, other, Matrix3); }\r\n    inverse() { return inverse(this, Matrix3); }\r\n    determinant() { return determinant(this, Matrix3); }\r\n    equals(other) { return equals(this, other, epsilon, Matrix3); }\r\n    multiplyVec2(v, z = 1) {\r\n        let { m11, m12, m13, m21, m22, m23, } = this;\r\n        let { x, y } = v;\r\n        return new Vector2_1.default(m11 * x + m12 * y + m13 * z, m21 * x + m22 * y + m23 * z);\r\n    }\r\n    static translation(x = 0, y = 0) {\r\n        return new Matrix3(1, 0, x, 0, 1, y, 0, 0, 1);\r\n    }\r\n    static rotation(angle = 0) {\r\n        let s = Math.sin(angle);\r\n        let c = Math.cos(angle);\r\n        return new Matrix3(c, -s, 0, s, c, 0, 0, 0, 1);\r\n    }\r\n    static scale(x = 1, y = 1) {\r\n        return new Matrix3(x, 0, 0, 0, y, 0, 0, 0, 1);\r\n    }\r\n    // https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\r\n    static transformation(preTranslationX, preTranslationY, angle, scaleX, scaleY, translationX, translationY) {\r\n        let px = preTranslationX, py = preTranslationY;\r\n        let a = angle;\r\n        let sx = scaleX;\r\n        let sy = scaleY;\r\n        let x = translationX;\r\n        let y = translationY;\r\n        let s = Math.sin(a), c = Math.cos(a);\r\n        return new Matrix3(sx * c, -sy * s, px * sx * c - py * sy * s + x, sx * s, sy * c, px * sx * s + py * sy * c + y, 0, 0, 1);\r\n    }\r\n    print() {\r\n        let { m11, m12, m13, m21, m22, m23, m31, m32, m33, } = this;\r\n        let rows = [\r\n            [m11, m12, m13],\r\n            [m21, m22, m23],\r\n            [m31, m32, m33],\r\n        ];\r\n        let columnWidths = [\r\n            [m11, m21, m31],\r\n            [m12, m22, m32],\r\n            [m13, m23, m33],\r\n        ].map(column => column.map(e => e.toString().length).reduce((a, b) => Math.max(a, b)));\r\n        let pad = (n, column) => n.toString().padStart(columnWidths[column]);\r\n        let result = rows.map(row => \"| \" + row.map(pad).join(\"  \") + \" |\").join(\"\\n\");\r\n        console.log(result);\r\n    }\r\n}\r\nexports.default = Matrix3;\r\nMatrix3.identity = new Matrix3(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n// Code generation:\r\nfunction* rangeGen(n) { for (let i = 1; i <= n; i++)\r\n    yield i; }\r\nfunction range(n) { return Array.from(rangeGen(n)); }\r\nfunction determinant2(a11, a12, a21, a22) {\r\n    return \"( \" + a11 + \" * \" + a22 + \" - \" + a12 + \" * \" + a21 + \" )\";\r\n}\r\nfunction determinant3(args) {\r\n    let [a11, a12, a13, a21, a22, a23, a31, a32, a33] = args;\r\n    return `(${a11} * ${determinant2(a22, a23, a32, a33)} -\r\n    ${a12} * ${determinant2(a21, a23, a31, a33)} +\r\n    ${a13} * ${determinant2(a21, a22, a31, a32)})`;\r\n}\r\nfunction destructureMatrix(name) {\r\n    let destructureArgs = range(3).map(j => range(3).map(i => \"m\" + j + i + \": \" + name + j + i).join(\", \")).join(\",\\n    \");\r\n    return \"let {\\n    \" + destructureArgs + \"\\n} = \" + name;\r\n}\r\nconst determinant = (() => {\r\n    let args = range(3).map((j) => range(3).map((i) => \"A.m\" + j + i)).flat();\r\n    let body = \"return \" + determinant3(args);\r\n    return new Function(\"A\", \"Matrix3\", body);\r\n})();\r\nconst multiplyMatrix = (() => {\r\n    let destructureA = destructureMatrix(\"A\");\r\n    let destructureB = destructureMatrix(\"B\");\r\n    let matrixArgs = range(3).map(j => range(3).map(i => range(3).map(k => \"A\" + j + k + \" * B\" + k + i).join(\" + \")).join(\", \")).join(\",\\n    \");\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        `return new Matrix3(\\n    ${matrixArgs}\\n)`\r\n    ].join(\"\\n\");\r\n    return new Function(\"A\", \"B\", \"Matrix3\", body);\r\n})();\r\n// https://en.wikipedia.org/wiki/Cramer%27s_rule#Finding_inverse_matrix\r\n// https://en.wikipedia.org/wiki/Adjugate_matrix#3_%C3%97_3_generic_matrix\r\nconst inverse = (() => {\r\n    let destructure = destructureMatrix(\"A\");\r\n    let detArgs = range(3).map((j) => range(3).map((i) => \"A\" + j + i)).flat();\r\n    let coefStatemnent = \"let c = 1 / \" + determinant3(detArgs);\r\n    let det2 = (a, b, c, d) => determinant2(\"A\" + a, \"A\" + b, \"A\" + c, \"A\" + d);\r\n    // Adjugate matrix:\r\n    let b11 = det2(22, 23, 32, 33), b12 = \"-\" + det2(12, 13, 32, 33), b13 = det2(12, 13, 22, 23);\r\n    let b21 = \"-\" + det2(21, 23, 31, 33), b22 = det2(11, 13, 31, 33), b23 = \"-\" + det2(11, 13, 21, 23);\r\n    let b31 = det2(21, 22, 31, 32), b32 = \"-\" + det2(11, 12, 31, 32), b33 = det2(11, 12, 21, 22);\r\n    let matrixArgs = [\r\n        [b11, b12, b13],\r\n        [b21, b22, b23],\r\n        [b31, b32, b33]\r\n    ].map(row => row.map(e => e + \" * c\").join(\", \")).join(\",\\n    \");\r\n    let body = [\r\n        destructure,\r\n        coefStatemnent,\r\n        `\\nreturn new Matrix3(${matrixArgs})`\r\n    ].join(\"\\n\");\r\n    return new Function(\"A\", \"Matrix3\", body);\r\n})();\r\nconst equals = (() => {\r\n    let destructureA = destructureMatrix(\"A\");\r\n    let destructureB = destructureMatrix(\"B\");\r\n    let comparisons = range(3).map(j => range(3).map(i => {\r\n        let index = j.toString() + i.toString();\r\n        return `if (Math.abs(A${index} - B${index}) > epsilon) return false`;\r\n    })).flat();\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        ...comparisons,\r\n        \"return true\"\r\n    ].join(\"\\n\");\r\n    return new Function(\"A\", \"B\", \"epsilon\", \"Matrix3\", body);\r\n})();\r\n",null,null,null,null,null,"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector2_1 = __importStar(require(\"./math/Vector2\"));\r\nconst Canvas_1 = __importDefault(require(\"./graphics/Canvas\"));\r\nwindow.addEventListener(\"mousemove\", e => { Input.mouse = Vector2_1.vector(e.x, e.y); });\r\nwindow.addEventListener(\"keydown\", e => Input.buttons[e.key] = true);\r\nwindow.addEventListener(\"keyup\", e => Input.buttons[e.key] = false);\r\nwindow.addEventListener(\"mousedown\", e => Input.buttons[\"Mouse\" + e.button] = true);\r\nwindow.addEventListener(\"mouseup\", e => Input.buttons[\"Mouse\" + e.button] = false);\r\nclass Input {\r\n    static mouseScreenPosition(canvas) {\r\n        if (canvas instanceof Canvas_1.default)\r\n            canvas = canvas.canvas;\r\n        let b = canvas.getBoundingClientRect();\r\n        return Input.mouse.addXY(-b.left, -b.top);\r\n    }\r\n}\r\nexports.default = Input;\r\nInput.mouse = Vector2_1.default.ZERO;\r\nInput.buttons = {};\r\n"],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","game","search","slice","time","performance","oldTime","dt","update","Math","min","requestAnimationFrame","loop","Game","instance","canvas","world","ageBeforeBeauty","initDraw","initPlay","timeline","state","draw","updateTime","fitWindow","smooth","fracTime","timeModification","img","alpha","translate","width","height","scale","timeDirection","image","sign","rewindSpeed","floor","applyModification","modifiedState","speedAdjust","lerp","speedAdjustTarget","intendedDeltaTime","stepsPerSecond","deltaTime","step","gotoTime","applyChanges","originalState","getState","changed","getModifiedWorldState","jumpTracker","resolveJump","openJump","Timeline","snapshots","getUpdatedState","snapshotInterval","snapshot","prev","snapshotNumber","lastSnapshotTime","remainingTime","rewindTo","key","otherTime","parseInt","object","$static","value","$dirty","constructor","Object","result","__proto__","prototype","cur","cloned","Map","isValueType","has","get","createInstance","deepEqual","set","curVal","prevVal","clonedVal","clone","a","b","verbose","path","visitedA","visitedB","pathStr","x","topologicalNumberA","topologicalNumberB","size","keys","deepCompare","pop","JumpTracker","totalOpenJumps","t","openJumps","u","exports","_level","level","layers","create","layer","layerId","name","objects","obj","entity","entityTable","properties","property","hasOwnProperty","y","addEntity","entityTypes","entityType","EntityBot","source","interpreter","dx","onGround","direction","dy","isEmpty","move","targetTime","arivalCountdown","max","timeTravelDelay","timeTravelCountdown","sheet","frame","imageSource","partialImage","lightness","composition","timeout","runScript","maybeTimeTravel","age","natives","_this2","drive","abs","jump","sleep","setNatives","nativeBindings","modifyWorldStateAtTime","copy","_this3","entities","other","logDifferences","removeEntity","Entity","displacementX","displacementY","blocked","blockedX","blockedY","blockedXY","drawAfterTranslation","Tile","__importDefault","mod","__esModule","defineProperty","Task","TaskHandlers_1","require","consoleUtils_1","node","done","child","instigator","returnKey","scope","ast","engineScope","exit","return","_a","returns","jumpInto","stepAndGetNextTask","handler","default","fail","process","stdout","write","colors","red","prettyPrint","reset","Error","next","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","clearTimeout","defaultClearTimeout","fun","marker","queue","draining","currentQueue","queueIndex","drainQueue","runTimeout","cleanUpNextTick","len","run","runClearTimeout","nextTick","args","arguments","Item","array","title","browser","env","argv","version","versions","on","noop","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","EntityDoor","extension","w","rect","motion","clip","triggers","triggerName","block","active","EntityPlate","setActive","EntityMover","TileLayers","World","stars","zoom","pixelWidth","pixelHeight","transformation","worldToScreenMatrix","inverse","multiplyVec2","divide","multiply","center","inBounds","tiles","index","tile","getTile","isAir","background","applyMatrix","drawTiles","drawEntities","foreground","entityRenderList","sort","currentEntities","_entity","Star","z","phase","Starfield","star","cos","PI","fillStyle","fill","random","n","m","x0","y0","x1","y1","action","forRect","j","tmp","swap","seed","Number","MAX_SAFE_INTEGER","coef","r","LoopholeTiles","loopHoleTileSet","tileSet","imageFile","basename","TypeError","stringify","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","charCodeAt","lastSlashIndex","lastIndexOf","sep","pathObject","base","ext","posix","resolve","resolvedPath","resolvedAbsolute","assertPath","normalizeStringPosix","normalize","isAbsolute","trailingSeparator","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","_format","ret","delimiter","win32","Editor","addEventListener","preventDefault","_this","selectionFadeCooldown","selection","deltaY","buttons","Shift","Control","selectionWheelAlpha","selectionSmooth","blockPos","mouseScreenPosition","Mouse0","setTile","selectedTile","targetLayer","Mouse1","Mouse2","screenSpaceToBlockSpace","worldPos","vrect","strokeStyle","stroke","vtranslate","sin","layerName","text","drawSelectionBar","stride","round","modulus","selectionIndex"],"version":3,"file":"index.7cacc1f4.js.map","sourceRoot":"/__parcel_source_root/"}