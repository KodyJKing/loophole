const {vector} = import './'
export class Level extends import './GameObject'
    widthOfTile: 50
    properties:
        _init: ->
            @tiles = []
            @initSampleLevel()
        initSampleLevel: ->
            let levelStr = ""
                .....
                .....
                .....
                .....
                .....

            let row = []
            for c in levelStr
                if c is '\n'
                    @tiles.push(row)
                    row = []
                else
                    row.push(c)
            if row.length > 0
                @tiles.push(row)

        tileHeight:
            get: -> @tiles.length
        tileWidth:
            get: -> Math.max.apply(..)
                null
                @tiles.map(..)
                    (x) -> x.length

        _update: ->
            @position = vector.div(..)
                vector.sub(..)
                    {x: game.canvas.width, y: game.canvas.height}
                    {x: @pixelWidth, y: @pixelHeight}
                2


        pixelHeight:
            get: -> @tileHeight * @@widthOfTile
        pixelWidth:
            get: -> @tileWidth * @@widthOfTile

        fillRect: (color) ->
            game.ctx.fillStyle = color
            game.ctx.fillRect(..)
                0, 0, @@widthOfTile, @@widthOfTile

        strokeRect: (color, width) ->
            game.ctx.strokeStyle = color
            game.ctx.lineWidth = width
            game.ctx.strokeRect(..)
                0, 0, @@widthOfTile, @@widthOfTile

        renderTile:
            ".": ->
                @fillRect('#272822')
                @strokeRect('#2f3129', 4)

        _render: ->
            for let y = 0; y < @tiles.length; y++
                let row = @tiles[y]
                for let x = 0; x < row.length; x++

                    let tile = row[x]
                    let renderer = @@properties.renderTile[tile]
                    if not renderer?
                        continue
                    renderer = renderer.bind(@)

                    game.ctx.save()
                    game.ctx.translate(x * @@widthOfTile, y * @@widthOfTile)
                    renderer()
                    game.ctx.restore()